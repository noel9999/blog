<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Noel Saga]]></title>
  <link href="http://noelsaga.herokuapp.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://noelsaga.herokuapp.com/"/>
  <updated>2015-09-25T01:22:50+08:00</updated>
  <id>http://noelsaga.herokuapp.com/</id>
  <author>
    <name><![CDATA[Noel]]></name>
    <email><![CDATA[terrorer9999@hotmail]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails 探訪html_safe]]></title>
    <link href="http://noelsaga.herokuapp.com/blog/2015/09/25/rails-tan-fang-html-safe/"/>
    <updated>2015-09-25T01:12:27+08:00</updated>
    <id>http://noelsaga.herokuapp.com/blog/2015/09/25/rails-tan-fang-html-safe</id>
    <content type="html"><![CDATA[<h2>介紹</h2>

<p>Rails3開始為了安全性的考量<code>(XSS）</code>，怕使用者張貼一些有特殊目的<code>HTML</code>到網站上進而影響其他使用者或網站運作，所以會自動把所有<code>&lt;%= %&gt;</code>裡的字串都做溢出，當字串包含先特殊符號如：<code>&lt; , &gt;</code>等等都會被處理掉，這樣自然就不會被瀏覽器，非常地安全，而如果想不被溢出，我們此時可以使用<code>html_safe</code>這個helper來避免，詳情可以參考<a href="https://ihower.tw/rails4/security.html">ihower網路安全</a>。</p>

<!--more-->


<p>但如果只講到這邊，那直接看<code>ihower</code>不是更快更詳細，所以這邊會在深入講解一下<code>html_safe</code>的應用與介紹。</p>

<h2>html_safe特性</h2>

<p>如果我們對一個字串呼叫<code>html_safe</code>，他其實會回傳一個<code>ActiveSupport::SafeBuffer</code>的物件，基本上這個物件用起來、看起來都很像一般的字串，但他有個<strong><em>特性</em></strong>，就是如果該物件與其他的字串物件做結合，如使用<code>+ 或 &lt;&lt;</code> 等方法結合時，後加入的字串會自動被溢出：</p>

<p>{% codeblock lang:rb %}</p>

<p>  &lsquo;<p>Foo</p>&rsquo;.html_safe + &lsquo;<p>Bar</p>&rsquo;
  # 會變成
  &ldquo;<p>Foo</p>&lt;p&gt;Bar&lt;/p&gt;&rdquo;
{% endcodeblock %}</p>

<p>如果被加入的字串也是個<code>SafeBuffer</code>則不會有被溢出</p>

<p>{% codeblock lang:rb %}
  &lsquo;<p>Foo</p>&rsquo;.html_safe + &lsquo;<p>Bar</p>&rsquo;.html_safe
  # 會變成
  &ldquo;<p>Foo</p><p>Bar</p>&rdquo;
{% endcodeblock %}</p>

<h2>Render與html_safe</h2>

<p>而<code>render</code>執行的時候，其實會先有一個<code>空字串的SafeBuffer</code>，在把template的每一行<del>?</del>都加入到那個字串裡面，所以本身就是<code>SafeBuffer</code>的字串就不會被溢出，純<code>html</code>也不會有是，而剩餘寫在<code>&lt;%= %&gt;</code>的當然都會自被溢出。</p>

<p>{% codeblock lang:rb %}</p>

<p>  html = &lsquo;&rsquo;.html_safe
  html &lt;&lt; &lsquo;<p>&rsquo;.html_safe
  html &lt;&lt; &lsquo;<br />&rsquo;
  html &lt;&lt; &lsquo;</p>&rsquo;.html_safe
  html
{% endcodeblock %}</p>

<p>而Rails本身提供的<code>view helper</code>都已經是經過html_safe處理的，所以則可以正常運作。</p>

<h2>小心使用html_safe</h2>

<p>如果想客製化自己的<code>view helper</code>或是直接對一串可能包含<strong><em>變數</em></strong>的字串做<code>html_safe</code>時，我們可能會這麼做</p>

<p>{% codeblock lang:rb %}</p>

<p>  &ldquo;<p>#{text}</p>&rdquo;.html_safe
  # or
  def my_helper(text)</p>

<pre><code>"&lt;p&gt;#{text}&lt;/p&gt;".html_safe
</code></pre>

<p>  end
{% endcodeblock %}
則可能會很大的風險，因為我們不知道變數<code>text</code> 會包含著什麼內容，但整個字串都被已經被取消溢出了，如果<code>text</code>是含有惡意的code則就危險了。</p>

<br>


<p>所以，我們其實是應該<code>針對未知的部份</code>做溢出即可</p>

<p>{% codeblock lang:rb %}</p>

<p>  def my_helper(text)</p>

<pre><code>html = ''.html_safe
html &lt;&lt; '&lt;p&gt;'.html_safe
html &lt;&lt; text
html &lt;&lt; '&lt;/p&gt;'.html_safe
</code></pre>

<p>  end
{% endcodeblock %}</p>

<p>但這樣好像有點醜，所以我們可以善用 Rails提供的<code>content_tag</code> helper來幫助我們，由於Rails helper都已經幫我們做好安全措施了，所以可以直接放心<del>服用</del></p>

<p>{% codeblock lang:rb %}</p>

<p>  def my_helper(text)</p>

<pre><code>content_tag(:p, text)
</code></pre>

<p>  end
{% endcodeblock %}</p>

<h2>結論</h2>

<ul>
<li>1: 永遠不要相信使用者傳來的參數或內容，要思考到最壞的打算</li>
<li>2: 避免對<code>含有未知內容的字串</code>做<code>html_safe</code></li>
</ul>


<p><a href="http://makandracards.com/makandra/2579-everything-you-know-about-html_safe-is-wrong">參考</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails為何要使用escape_javascript?]]></title>
    <link href="http://noelsaga.herokuapp.com/blog/2015/09/25/railswei-he-yao-shi-yong-escape-javascript/"/>
    <updated>2015-09-25T00:35:13+08:00</updated>
    <id>http://noelsaga.herokuapp.com/blog/2015/09/25/railswei-he-yao-shi-yong-escape-javascript</id>
    <content type="html"><![CDATA[<h2>前言:</h2>

<p>在Rails裡，為了某些AJAX效果，我們會使用<code>RJS（Remote Javascript）</code>，簡單地說就是發送了個js請求給server，rails controller做了某些事情後會<code>render像是*.js.erb的檔案</code>，在這檔案裡我們可以混用ruby與js，所以可以做些我們想做的事之後再編譯成js code並回傳給browser，然後browser直接處理這段js並改變網頁文件。</p>

<!--more-->


<p>{% img /images/rjs_example.png 800 600 &lsquo;RJS圖例說明&rsquo; &lsquo;RJS圖例說明&rsquo; %}</p>

<br>


<p> 而通常我們希望改變的網頁上的某些區塊例如：某表單、某欄位，所以我們最快的方法是使用Rails提供的方法像是 <code>render</code>來直接產生一些html，像是增加一個圖片連結：</p>

<p>{% codeblock lang:html %}</p>

<pre><code>&lt;a href="http://somehost/resources/123456"&gt;Hello World!&lt;/a&gt;
</code></pre>

<p>{% endcodeblock %}</p>

<p>我們會使用<code>$('#some_id').append("&lt;%= render some_link %&gt;")</code>
來更改頁面，但如果直接這樣用把剛剛那段html當做參數丟進去就會有問題，因為<code>append("&lt;%= ... %&gt;")</code> 的那雙引號會造成bug，會變成：</p>

<p>{% codeblock lang:js %}</p>

<p>  $(&lsquo;#some_id&rsquo;).append(&ldquo;<a href="http://somehost/resources/123456">Hello World</a>&rdquo;)
{% endcodeblock %}</p>

<p>兩個雙引號組成的字串，會因為其他的雙引號造成問題，
所以我們需要<code>escape_javascript</code>來幫忙跳脫雙引號的<del>束縛</del>，`</p>

<p>{% codeblock lang:js %}</p>

<p>  $(&lsquo;#some_id&rsquo;).append(&ldquo;&lt;%= escape_javascript render some_link %>&rdquo;)`:
  // 會等於
  $(&lsquo;#some_id&rsquo;).append(&ldquo;<a href=\"http://somehost/resources/123456\">Hello World</a>&rdquo;)
{% endcodeblock %}</p>

<h4>那如果我們不用雙引號，改用單引號包起來的話呢？</h4>

<p>因為在jQuery我們的確會這麼寫
{% codeblock lang:js %}
  $(&lsquo;#some_id&rsquo;).append(&lsquo;&ldquo;<p>Hello World</p>&rdquo;&rsquo;)
{% endcodeblock %}</p>

<p>但實際上只用單引號包起來仍然會碰到字串內容如果有<code>斷行(\n)</code>而造成的問題，所以也要交給<code>escape_javascript</code>處理掉。</p>

<p>所以，為了在<code>RJS</code>等使用情境下，為了取得</p>

<ul>
<li>1: <strong><em>有效且可執行的 javascript code</em></strong></li>
<li>2: <strong><em>跳脫雙引號帶來的束縛</em></strong></li>
</ul>


<p><a href="http://stackoverflow.com/questions/1620113/why-escape-javascript-before-rendering-a-partial">參考</a></p>
]]></content>
  </entry>
  
</feed>
