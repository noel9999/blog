<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Noel Saga]]></title>
  <link href="http://noelsaga.herokuapp.com/atom.xml" rel="self"/>
  <link href="http://noelsaga.herokuapp.com/"/>
  <updated>2015-09-26T18:54:59+08:00</updated>
  <id>http://noelsaga.herokuapp.com/</id>
  <author>
    <name><![CDATA[Noel]]></name>
    <email><![CDATA[terrorer9999@hotmail]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails 探訪html_safe]]></title>
    <link href="http://noelsaga.herokuapp.com/blog/2015/09/25/rails-tan-fang-html-safe/"/>
    <updated>2015-09-25T01:12:27+08:00</updated>
    <id>http://noelsaga.herokuapp.com/blog/2015/09/25/rails-tan-fang-html-safe</id>
    <content type="html"><![CDATA[<h2>介紹</h2>

<p>Rails3開始為了安全性的考量<code>(XSS）</code>，怕使用者張貼一些有特殊目的<code>HTML</code>到網站上進而影響其他使用者或網站運作，所以會自動把所有<code>&lt;%= %&gt;</code>裡的字串都做溢出，當字串包含先特殊符號如：<code>&lt; , &gt;</code>等等都會被處理掉，這樣自然就不會被瀏覽器，非常地安全，而如果想不被溢出，我們此時可以使用<code>html_safe</code>這個helper來避免，詳情可以參考<a href="https://ihower.tw/rails4/security.html">ihower網路安全</a>。</p>

<!--more-->


<p>但如果只講到這邊，那直接看<code>ihower</code>不是更快更詳細，所以這邊會在深入講解一下<code>html_safe</code>的應用與介紹。</p>

<h2>html_safe特性</h2>

<p>如果我們對一個字串呼叫<code>html_safe</code>，他其實會回傳一個<code>ActiveSupport::SafeBuffer</code>的物件，基本上這個物件用起來、看起來都很像一般的字串，但他有個<strong><em>特性</em></strong>，就是如果該物件與其他的字串物件做結合，如使用<code>+ 或 &lt;&lt;</code> 等方法結合時，後加入的字串會自動被溢出：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>
</span><span class='line'>  <span class="s1">&#39;&lt;p&gt;Foo&lt;/p&gt;&#39;</span><span class="o">.</span><span class="n">html_safe</span> <span class="o">+</span> <span class="s1">&#39;&lt;p&gt;Bar&lt;/p&gt;&#39;</span>
</span><span class='line'>  <span class="c1"># 會變成 </span>
</span><span class='line'>  <span class="s2">&quot;&lt;p&gt;Foo&lt;/p&gt;&amp;lt;p&amp;gt;Bar&amp;lt;/p&amp;gt;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果被加入的字串也是個<code>SafeBuffer</code>則不會有被溢出</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="s1">&#39;&lt;p&gt;Foo&lt;/p&gt;&#39;</span><span class="o">.</span><span class="n">html_safe</span> <span class="o">+</span> <span class="s1">&#39;&lt;p&gt;Bar&lt;/p&gt;&#39;</span><span class="o">.</span><span class="n">html_safe</span>
</span><span class='line'>  <span class="c1"># 會變成 </span>
</span><span class='line'>  <span class="s2">&quot;&lt;p&gt;Foo&lt;/p&gt;&lt;p&gt;Bar&lt;/p&gt;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Render與html_safe</h2>

<p>而<code>render</code>執行的時候，其實會先有一個<code>空字串的SafeBuffer</code>，在把template的每一行<del>?</del>都加入到那個字串裡面，所以本身就是<code>SafeBuffer</code>的字串就不會被溢出，純<code>html</code>也不會有是，而剩餘寫在<code>&lt;%= %&gt;</code>的當然都會自被溢出。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="n">html</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="o">.</span><span class="n">html_safe</span>
</span><span class='line'>  <span class="n">html</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;&lt;p&gt;&#39;</span><span class="o">.</span><span class="n">html_safe</span>
</span><span class='line'>  <span class="n">html</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;&lt;br /&gt;&#39;</span>
</span><span class='line'>  <span class="n">html</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;&lt;/p&gt;&#39;</span><span class="o">.</span><span class="n">html_safe</span>
</span><span class='line'>  <span class="n">html</span>
</span></code></pre></td></tr></table></div></figure>


<p>而Rails本身提供的<code>view helper</code>都已經是經過html_safe處理的，所以則可以正常運作。</p>

<h2>小心使用html_safe</h2>

<p>如果想客製化自己的<code>view helper</code>或是直接對一串可能包含<strong><em>變數</em></strong>的字串做<code>html_safe</code>時，我們可能會這麼做</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="s2">&quot;&lt;p&gt;</span><span class="si">#{</span><span class="n">text</span><span class="si">}</span><span class="s2">&lt;/p&gt;&quot;</span><span class="o">.</span><span class="n">html_safe</span>
</span><span class='line'>  <span class="c1"># or</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">my_helper</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>    <span class="s2">&quot;&lt;p&gt;</span><span class="si">#{</span><span class="n">text</span><span class="si">}</span><span class="s2">&lt;/p&gt;&quot;</span><span class="o">.</span><span class="n">html_safe</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>則可能會很大的風險，因為我們不知道變數<code>text</code> 會包含著什麼內容，但整個字串都被已經被取消溢出了，如果<code>text</code>是含有惡意的code則就危險了。</p>

<br>


<p>所以，我們其實是應該<code>針對未知的部份</code>做溢出即可</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="k">def</span> <span class="nf">my_helper</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>    <span class="n">html</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="o">.</span><span class="n">html_safe</span>
</span><span class='line'>    <span class="n">html</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;&lt;p&gt;&#39;</span><span class="o">.</span><span class="n">html_safe</span>
</span><span class='line'>    <span class="n">html</span> <span class="o">&lt;&lt;</span> <span class="n">text</span>
</span><span class='line'>    <span class="n">html</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;&lt;/p&gt;&#39;</span><span class="o">.</span><span class="n">html_safe</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>但這樣好像有點醜，所以我們可以善用 Rails提供的<code>content_tag</code> helper來幫助我們，由於Rails helper都已經幫我們做好安全措施了，所以可以直接放心<del>服用</del></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="k">def</span> <span class="nf">my_helper</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>    <span class="n">content_tag</span><span class="p">(</span><span class="ss">:p</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>結論</h2>

<ol>
<li>永遠不要相信使用者傳來的參數或內容，要思考到最壞的打算</li>
<li>避免對<code>含有未知內容的字串</code>做<code>html_safe</code></li>
</ol>


<p><a href="http://makandracards.com/makandra/2579-everything-you-know-about-html_safe-is-wrong">參考</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails為何要使用escape_javascript?]]></title>
    <link href="http://noelsaga.herokuapp.com/blog/2015/09/25/railswei-he-yao-shi-yong-escape-javascript/"/>
    <updated>2015-09-25T00:35:13+08:00</updated>
    <id>http://noelsaga.herokuapp.com/blog/2015/09/25/railswei-he-yao-shi-yong-escape-javascript</id>
    <content type="html"><![CDATA[<h2>前言:</h2>

<p>在Rails裡，為了某些AJAX效果，我們會使用<code>RJS（Remote Javascript）</code>，簡單地說就是發送了個js請求給server，rails controller做了某些事情後會<code>render像是*.js.erb的檔案</code>，在這檔案裡我們可以混用ruby與js，所以可以做些我們想做的事之後再編譯成js code並回傳給browser，然後browser直接處理這段js並改變網頁文件。</p>

<!--more-->


<p><img src="http://noelsaga.herokuapp.com/images/rjs_example.png" width="800" height="600" title="RJS圖例說明" alt="RJS圖例說明"></p>

<br>


<p> 而通常我們希望改變的網頁上的某些區塊例如：某表單、某欄位，所以我們最快的方法是使用Rails提供的方法像是 <code>render</code>來直接產生一些html，像是增加一個圖片連結：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://somehost/resources/123456&quot;</span><span class="nt">&gt;</span>Hello World!<span class="nt">&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>我們會使用<code>$('#some_id').append("&lt;%= render some_link %&gt;")</code>
來更改頁面，但如果直接這樣用把剛剛那段html當做參數丟進去就會有問題，因為<code>append("&lt;%= ... %&gt;")</code> 的那雙引號會造成bug，會變成：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#some_id&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;&lt;a href=&quot;</span><span class="nx">http</span><span class="o">:</span><span class="c1">//somehost/resources/123456&quot;&gt;Hello World&lt;/a&gt;&quot;)</span>
</span></code></pre></td></tr></table></div></figure>


<p>兩個雙引號組成的字串，會因為其他的雙引號造成問題，
所以我們需要<code>escape_javascript</code>來幫忙跳脫雙引號的<del>束縛</del>，`</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#some_id&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;&lt;%= escape_javascript render some_link %&gt;&quot;</span><span class="p">)</span><span class="err">`</span><span class="o">:</span>
</span><span class='line'>  <span class="c1">// 會等於</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#some_id&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;&lt;a href=\&quot;http://somehost/resources/123456\&quot;&gt;Hello World&lt;/a&gt;&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>那如果我們不用雙引號，改用單引號包起來的話呢？</h4>

<p>因為在jQuery我們的確會這麼寫</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#some_id&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="s1">&#39;&quot;&lt;p&gt;Hello World&lt;/p&gt;&quot;&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>但實際上只用單引號包起來仍然會碰到字串內容如果有<code>斷行(\n)</code>而造成的問題，所以也要交給<code>escape_javascript</code>處理掉。</p>

<p>所以，為了在<code>RJS</code>等使用情境下，為了取得</p>

<ol>
<li> <strong><em>有效且可執行的 javascript code</em></strong></li>
<li> <strong><em>跳脫雙引號帶來的束縛</em></strong></li>
</ol>


<p><a href="http://stackoverflow.com/questions/1620113/why-escape-javascript-before-rendering-a-partial">參考</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Arguments 小技巧]]></title>
    <link href="http://noelsaga.herokuapp.com/blog/2015/09/15/ruby-arguments-xiao-ji-qiao/"/>
    <updated>2015-09-15T00:42:40+08:00</updated>
    <id>http://noelsaga.herokuapp.com/blog/2015/09/15/ruby-arguments-xiao-ji-qiao</id>
    <content type="html"><![CDATA[<p>在ruby裡，函式參數的定義與使用可以多變且靈活，這裡我們來分享一些比較特別的但實用的例子</p>

<!--more-->


<h2>參數的定義使用</h2>

<p>當如果參數是要使用hash的話，我們都知道可以這樣用</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">hello</span> <span class="p">(</span><span class="n">options</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>  <span class="n">first_name</span> <span class="o">=</span> <span class="n">options</span><span class="o">[</span><span class="ss">:first_name</span><span class="o">]</span>
</span><span class='line'>  <span class="n">last_name</span> <span class="o">=</span> <span class="n">options</span><span class="o">[</span><span class="ss">:last_name</span><span class="o">]</span>
</span><span class='line'>  <span class="sx">%Q(Hello, </span><span class="si">#{</span><span class="n">first_name</span><span class="si">}</span><span class="sx"> </span><span class="si">#{</span><span class="n">last_name</span><span class="si">}</span><span class="sx">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">hello</span> <span class="n">first_name</span><span class="p">:</span> <span class="s1">&#39;Wayne&#39;</span><span class="p">,</span> <span class="n">last_name</span><span class="p">:</span> <span class="s1">&#39;Rooney&#39;</span>
</span><span class='line'><span class="sr">//</span> <span class="s2">&quot;Hello, Wayne Rooney&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>使用 <em>Keyword Arguments</em></h3>

<p>但實際可以這樣用更快，少了從<code>options</code>取值的步驟，而且結果是一樣的</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">hello</span> <span class="p">(</span><span class="n">first_name</span><span class="p">:,</span> <span class="n">last_name</span><span class="p">:)</span>
</span><span class='line'>  <span class="sx">%Q(Hello, </span><span class="si">#{</span><span class="n">first_name</span><span class="si">}</span><span class="sx"> </span><span class="si">#{</span><span class="n">last_name</span><span class="si">}</span><span class="sx">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">hello</span> <span class="n">first_name</span><span class="p">:</span> <span class="s1">&#39;Wayne&#39;</span><span class="p">,</span> <span class="n">last_name</span><span class="p">:</span> <span class="s1">&#39;Rooney&#39;</span>
</span><span class='line'><span class="sr">//</span> <span class="s2">&quot;Hello, Wayne Rooney&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>直接丟一個<code>hash</code>給它也可以，<del>廢話</del></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">hello</span> <span class="p">{</span> <span class="n">first_name</span><span class="p">:</span> <span class="s1">&#39;Wayne&#39;</span><span class="p">,</span> <span class="n">last_name</span><span class="p">:</span> <span class="s1">&#39;Rooney&#39;</span> <span class="p">}</span>
</span><span class='line'><span class="sr">//</span> <span class="s2">&quot;Hello, Wayne Rooney&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>但這樣會失敗</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">hello</span> <span class="n">first_name</span><span class="p">:</span> <span class="s1">&#39;Wayne&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="n">last_name</span><span class="p">:</span> <span class="s1">&#39;Rooney&#39;</span> <span class="p">}</span>
</span><span class='line'><span class="sr">//</span> <span class="ss">SyntaxError</span><span class="p">:</span> <span class="n">unexpected</span> <span class="s1">&#39;\n&#39;</span><span class="p">,</span> <span class="n">expecting</span> <span class="o">=&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>必須先把<code>merge</code>成一個hash，或使採用<del>更潮</del>的<code>**</code>運算子</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">hello</span> <span class="n">first_name</span><span class="p">:</span> <span class="s1">&#39;Wayne&#39;</span><span class="p">,</span> <span class="o">**</span><span class="p">{</span> <span class="n">last_name</span><span class="p">:</span> <span class="s1">&#39;Rooney&#39;</span> <span class="p">}</span>
</span><span class='line'><span class="s2">&quot;Hello, Wayne Rooney&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>也可以與其他參數混用，但一般來說我們會把<code>hash</code>形式的參數擺在最後面</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'> <span class="k">def</span> <span class="nf">man_united</span><span class="p">(</span><span class="n">manager</span><span class="p">,</span> <span class="n">members</span><span class="p">,</span> <span class="ss">color</span><span class="p">:,</span> <span class="nb">name</span><span class="p">:)</span>
</span><span class='line'>    <span class="sx">%Q(Manager: </span><span class="si">#{</span><span class="n">manager</span><span class="si">}</span><span class="sx">, members: </span><span class="si">#{</span><span class="n">members</span><span class="si">}</span><span class="sx">, color: </span><span class="si">#{</span><span class="n">color</span><span class="si">}</span><span class="sx">, name: </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="sx"> )</span>
</span><span class='line'> <span class="k">end</span>
</span><span class='line'> <span class="n">man_united</span> <span class="s1">&#39;+2&#39;</span><span class="p">,</span> <span class="ss">:rooney</span><span class="p">,</span> <span class="ss">color</span><span class="p">:</span> <span class="ss">:red</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="ss">:red_devil</span>
</span><span class='line'> <span class="sr">//</span> <span class="s2">&quot;Manager: +2, members: rooney, color: red, name: red_devil &quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>我們也可以這樣用，讓不固定的參數可以區分成<code>array</code>與<code>hash</code>型態</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'> <span class="k">def</span> <span class="nf">test</span><span class="p">(</span><span class="o">*</span><span class="n">array</span><span class="p">,</span> <span class="o">**</span><span class="nb">hash</span><span class="p">)</span>
</span><span class='line'>  <span class="s2">&quot;</span><span class="si">#{</span><span class="n">array</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">array</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="nb">hash</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span><span class="si">}</span><span class="s2">, </span><span class="si">#{</span><span class="nb">hash</span><span class="o">[</span><span class="ss">:age</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'> <span class="nb">test</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="nb">name</span><span class="p">:</span> <span class="ss">:noel</span><span class="p">,</span> <span class="ss">age</span><span class="p">:</span> <span class="mi">27</span><span class="p">,</span> <span class="ss">extra</span><span class="p">:</span> <span class="ss">:not_available</span><span class="p">)</span>
</span><span class='line'> <span class="sr">//</span> <span class="s2">&quot;1 2 noel, 27&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>如果不在乎傳入什麼值的話，可以這樣定義方法</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'> <span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="o">*</span><span class="p">)</span>
</span><span class='line'>  <span class="n">do_something</span>
</span><span class='line'> <span class="k">end</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>這樣有什麼好處呢？假使今天我們想覆寫某個方法，在執行前先去增加某些邏輯，但又不影響到其他地方的使用。我們可以這樣寫：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'> <span class="k">def</span> <span class="nf">save</span><span class="p">(</span><span class="o">*</span><span class="p">)</span>
</span><span class='line'>  <span class="n">do_something</span>
</span><span class='line'>  <span class="k">super</span>
</span><span class='line'> <span class="k">end</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>這樣同樣是呼叫<code>save</code>方法，但我已經在裡面塞入某些邏輯，但又不影響其他地方對<code>save</code>的使用，而<code>save</code>依然不需要擔心到底會接到哪些參數，反正都會原封不動的還給<code>super</code></p>

<p><a href="http://www.justinweiss.com/blog/2015/03/30/fun-with-keyword-arguments/">參考</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 類別變數]]></title>
    <link href="http://noelsaga.herokuapp.com/blog/2015/07/22/ruby-lei-bie-bian-shu/"/>
    <updated>2015-07-22T23:36:42+08:00</updated>
    <id>http://noelsaga.herokuapp.com/blog/2015/07/22/ruby-lei-bie-bian-shu</id>
    <content type="html"><![CDATA[<p>類別變數，有時也稱靜態變數，簡單說就是專屬於類別的變數，不依實體不同而有所差異，類別成員下皆共享的，因為是存在特定的記憶體區塊，所以不會因實體的存活期間所影響。</p>

<p>各個oop語言的類別變數大致的理念都是相同的，用法上可能會略有不同，今次是就來探討<code>ruby</code>的使用狀況。</p>

<!--more-->


<h2>類別變數種類</h2>

<p><code>ruby</code>的類別變數有區分以下兩種，而兩者都可以被類別方法正常存取與使用，但還是有差異如下：</p>

<blockquote><p>@@var => Class Variable  類別變數</p>

<p>@var => Class Instance Variable  類別實體變數</p></blockquote>

<h3>主要差異為：</h3>

<h3>1.<code>@@</code>可以給子類別繼承; <code>@</code>不可以</h3>

<figure class='code'><figcaption><span>類別變數繼承 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Parent</span>
</span><span class='line'>  <span class="vc">@@blood</span> <span class="o">=</span> <span class="ss">:b</span>
</span><span class='line'>  <span class="vi">@hobby</span> <span class="o">=</span> <span class="ss">:car</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">blood</span>
</span><span class='line'>    <span class="vc">@@blood</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">hobby</span>
</span><span class='line'>    <span class="vi">@hobby</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Child</span> <span class="o">&lt;</span> <span class="no">Parent</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Parent</span><span class="o">.</span><span class="n">hobby</span> <span class="c1"># car</span>
</span><span class='line'><span class="no">Child</span><span class="o">.</span><span class="n">hobby</span> <span class="c1"># nil</span>
</span><span class='line'><span class="no">Parent</span><span class="o">.</span><span class="n">blood</span> <span class="c1"># b</span>
</span><span class='line'><span class="no">Child</span><span class="o">.</span><span class="n">blodd</span> <span class="c1"># b</span>
</span><span class='line'>
</span><span class='line'><span class="no">Child</span><span class="o">.</span><span class="n">instance_eval</span> <span class="k">do</span>
</span><span class='line'>  <span class="vi">@hobby</span> <span class="o">=</span> <span class="ss">:coding</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="no">Child</span><span class="o">.</span><span class="n">hobby</span> <span class="c1"># coding</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h3>2.<code>@@</code>雖可以被繼承，但由於所有類別都共用，故<code>@@</code>更改後也會影響其他類別所擁有的相同<code>@@</code>;而<code>@</code>因為不會被繼承所以沒這問題</h3>

<p>所以使用<code>@@</code>的時候請小心，一般來說較常使用<code>@</code>來當做類別變數</p>

<figure class='code'><figcaption><span>類別變數共享問題 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Parent</span>
</span><span class='line'>  <span class="vc">@@blood</span> <span class="o">=</span> <span class="ss">:b</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">blood</span>
</span><span class='line'>    <span class="vc">@@blood</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">blood</span><span class="o">=</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="vc">@@blood</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Child</span> <span class="o">&lt;</span> <span class="no">Parent</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Parent</span><span class="o">.</span><span class="n">blood</span> <span class="c1"># b</span>
</span><span class='line'><span class="no">Child</span><span class="o">.</span><span class="n">blood</span> <span class="c1"># b</span>
</span><span class='line'><span class="no">Child</span><span class="o">.</span><span class="n">blood</span> <span class="o">=</span> <span class="ss">:c</span>
</span><span class='line'><span class="no">Parent</span><span class="o">.</span><span class="n">blood</span> <span class="c1"># c</span>
</span><span class='line'><span class="no">Child</span><span class="o">.</span><span class="n">blood</span> <span class="c1"># c</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h3>3.<code>@@</code>可以給實體方法使用; <code>@</code>不可以</h3>

<p>因為<code>@</code>對實體方法的角度來看，會當做實體變數去讀取而非類別實體變數</p>

<figure class='code'><figcaption><span>實體方法使用類別變數 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Parent</span>
</span><span class='line'>  <span class="vc">@@blood</span> <span class="o">=</span> <span class="ss">:b</span>
</span><span class='line'>  <span class="vi">@hobby</span> <span class="o">=</span> <span class="ss">:car</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">blood</span>
</span><span class='line'>    <span class="vc">@@blood</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">hobby</span>
</span><span class='line'>    <span class="vi">@hobby</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">dad</span> <span class="o">=</span> <span class="no">Parent</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">dad</span><span class="o">.</span><span class="n">blood</span> <span class="c1"># b</span>
</span><span class='line'><span class="n">dad</span><span class="o">.</span><span class="n">hobby</span> <span class="c1"># nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果實體方法想使用類別實體變數，那就改讓實體方法去呼叫類別方法即可</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">Parent</span><span class="o">.</span><span class="n">class_eval</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">hobby</span>
</span><span class='line'>    <span class="vi">@hobby</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">get_hobby_by_class_method</span>
</span><span class='line'>    <span class="no">Parent</span><span class="o">.</span><span class="n">hobby</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">mom</span> <span class="o">=</span> <span class="no">Parent</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">mom</span><span class="o">.</span><span class="n">hobby</span> <span class="c1"># nil</span>
</span><span class='line'><span class="n">mom</span><span class="o">.</span><span class="n">get_hobby_by_class_method</span> <span class="c1"># car</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>補充</h2>

<p>換種類別方法定義的方式來看更複雜一點的例子</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Animal</span>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>    <span class="vc">@@move</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>    <span class="vc">@@breath</span> <span class="o">=</span> <span class="s2">&quot;Air&quot;</span>
</span><span class='line'>    <span class="vi">@food</span> <span class="o">=</span> <span class="sx">%w(meat grass)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">description</span>
</span><span class='line'>      <span class="k">if</span> <span class="vc">@@move</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="s2">&quot;We Can beathe </span><span class="si">#{</span><span class="vc">@@breath</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">food</span>
</span><span class='line'>      <span class="vi">@food</span> <span class="o">||=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">food_list</span>
</span><span class='line'>      <span class="vi">@food</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">food</span><span class="o">|</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="s2">&quot;We like </span><span class="si">#{</span><span class="n">food</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="k">end</span> <span class="k">if</span> <span class="vi">@food</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Animal</span><span class="o">.</span><span class="n">description</span>
</span><span class='line'><span class="c1"># We Can beathe Air</span>
</span><span class='line'><span class="c1"># nil</span>
</span><span class='line'><span class="no">Animal</span><span class="o">.</span><span class="n">food_list</span>
</span><span class='line'><span class="c1"># nil</span>
</span><span class='line'><span class="no">Animal</span><span class="o">.</span><span class="n">food</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;meat&quot;</span>
</span><span class='line'><span class="no">Animal</span><span class="o">.</span><span class="n">food_list</span>
</span><span class='line'><span class="c1"># We like meat</span>
</span></code></pre></td></tr></table></div></figure>


<p>看來我們無法在<code>class &lt;&lt; self</code>的裡面直接定義<code>@</code>的類別實體變數，若非要在該區塊內設定<code>@</code>的類別實體變數，得借用類別方法來完成！</p>

<hr />

<h3>參考</h3>

<p><a href="https://rubymonk.com/learning/books/4-ruby-primer-ascent/chapters/45-more-classes/lessons/113-class-variables">Class Variables and Methods</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用pre-commit來修煉codestyle]]></title>
    <link href="http://noelsaga.herokuapp.com/blog/2015/07/22/shi-yong-pre-commitlai-xiu-lian-codestyle/"/>
    <updated>2015-07-22T01:35:26+08:00</updated>
    <id>http://noelsaga.herokuapp.com/blog/2015/07/22/shi-yong-pre-commitlai-xiu-lian-codestyle</id>
    <content type="html"><![CDATA[<p>想寫出有<strong>執行效率</strong>、又<strong>簡潔易讀</strong>、<del>又潮</del>的ruby codestyle嗎？</p>

<p>雖然不是人人都有大神幫忙做code review，但慶幸ruby有<code>rubocop</code>可以用，裡面可以偵測我們的code是否有符合ruby codestyle的最適規範，而且還可以搭配<code>pre-commit</code>，這個gem來幫我們做到每次提交commit前先掃描我們的code，看看是否有符合codestyle，沒有符合的話就不給commit，希望借此養成良好的codestyle！</p>

<!--more-->


<h3>1. 首先安裝gem</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'pre-commit', require: false
</span><span class='line'>gem 'rubocop', require: false</span></code></pre></td></tr></table></div></figure>


<h3>2.新增檔案 rails_project/.robocup.yml</h3>

<p>這部份我都是手動新增的，裡面定義了一些基礎的客製化規範，照抄前輩挑選的，大家如果沒特定需求也可以照抄</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">AllCops</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">RunRailsCops</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>  <span class="l-Scalar-Plain">Exclude</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">db/schema.rb</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Metrics/LineLength</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">Max</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">120</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Metrics/MethodLength</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">Max</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">20</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Metrics/ClassLength</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">Max</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">250</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Style/AsciiComments</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">Enabled</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Style/ClassAndModuleChildren</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">EnforcedStyle</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">compact</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Style/Documentation</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">Enabled</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Style/IfUnlessModifier</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">Enabled</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3.新增檔案 config/pre_commit.yml</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">:checks_remove</span><span class="p-Indicator">:</span> <span class="p-Indicator">[]</span>
</span><span class='line'><span class="l-Scalar-Plain">:checks_add</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">:tabs</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">:nb_space</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">:whitespace</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">:merge_conflict</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">:debugger</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">:pry</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">:local</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">:jshint</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">:console_log</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">:migration</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">:rubocop</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4. 執行<code>pre-commit install</code></h3>

<p>之後，每次開始提交commit就會在terminal下看到執行的結果了！然後就乖乖的養成良好的習慣慢慢改吧，雖然一開始會不習慣，但是之後會發現真的挺受用的！<br/>
如果有看不懂的提示也可以去Google找或是去<a href="https://github.com/bbatsov/ruby-style-guide#underscore-unused-vars">ruby-style-guide</a>翻閱看看，裡面都有解釋為何這樣設計或是範例。</p>

<h3>5.補充</h3>

<p>若想偷懶強制commit上去可以加上參數<code>-n</code></p>

<p><code>git commit -am 'some message' -n</code></p>

<h3>參考：<a href="https://github.com/jish/pre-commit">github: pre-commit</a></h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[開發中，常見的參數payload是什麼?]]></title>
    <link href="http://noelsaga.herokuapp.com/blog/2015/07/18/kai-fa-zhong-,chang-jian-de-can-shu-payloadshi-shi-mo/"/>
    <updated>2015-07-18T02:34:43+08:00</updated>
    <id>http://noelsaga.herokuapp.com/blog/2015/07/18/kai-fa-zhong-,chang-jian-de-can-shu-payloadshi-shi-mo</id>
    <content type="html"><![CDATA[<p>開發中，常常見到許多文件裡的方法或函式帶有名為<code>payload</code>的參數，像是最近在因為新專案開始使用了<code>react.js</code>+<code>flux</code>，正在看前輩的code學習與<del>觀摩中</del>，就非常常見到payload這參數，直覺想到『
啊這個字就是負載量啊!?沒什麼的嘛』但其實知道他英文叫做負載量但我還是不知道這參數是要幹什麼的，或是為什麼要這樣取名，不直接叫<code>data</code>, <code>params</code>之類的。甚至不小心在看pg官方文件裡又出現payload這個參數名，讓我更驚覺到原來不是只有<code>flux</code>裡面這樣用，別的地方也會這樣命名，也意味著這其實是個常見且通用的使用名詞，所以還是來個一探究竟的好。</p>

<!--more-->


<hr />

<h2>Payload的定義</h2>

<p>payload意思即為承載量，在開發中則是指出在一堆資料中我們所<strong><em>關心</em></strong>的部分!</p>

<p>網路找到的定義為：</p>

<blockquote><p>On the Internet, a payload is either: The essential data that is being carried within a packet or other transmission unit.</p></blockquote>

<h2>Payload的由來</h2>

<p>google到一篇很好的文章對payload為何這樣叫有很好的解釋，文中指出這個名詞是借用運輸工具上的觀念而來的，例如：卡車、油罐車、貨輪等所謂的<strong>載具</strong>，然後通常一個載具的總重量一定<strong>大於</strong>載具的承載量，例如油罐車的總重量包含了他所運載的油量、司機的重量、油罐車行駛所需的油量，但我們所關心僅是油罐車所承載的油量而已。</p>

<p><del>故，得證</del></p>

<blockquote><p>Payload, the load that pays</p></blockquote>

<p>對programming來說，我們可以某api的response為例子來看</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;status&quot;</span><span class="o">:</span><span class="s2">&quot;OK&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;data&quot;</span><span class="o">:</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="s2">&quot;message&quot;</span><span class="o">:</span><span class="s2">&quot;Hello, world!&quot;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> 其中的Hello, world!正是payload，也是我們關心的部分。</p>

<p> 到這裡我們應該了解為何參數名要叫做<code>payload</code>，而非<code>data</code>或是<code>params</code>是有其目的性的，而更進一步的熟悉與使用payload這個參數，則就要再深入看該方法或函式的使用與定義了。</p>

<h2>參考</h2>

<p><a href="http://programmers.stackexchange.com/questions/158603/what-does-the-term-payload-mean-in-programming">文中的解釋與例子出處</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSONP 介紹]]></title>
    <link href="http://noelsaga.herokuapp.com/blog/2015/07/06/jsonp-jie-shao/"/>
    <updated>2015-07-06T01:56:17+08:00</updated>
    <id>http://noelsaga.herokuapp.com/blog/2015/07/06/jsonp-jie-shao</id>
    <content type="html"><![CDATA[<p>JSONP(JSON with Padding)，聽起來跟<code>JSON</code>很像？兩者有什麼關連嗎？！JSONP是一種跨網域資料交換的<strong><em>方式</em></strong>，而JSON則是一種資料交換的<strong><em>格式</em></strong>。而兩者的關聯就是JSON是<code>AJAX</code>在交換資料所常用的格式，而JSONP則是AJAX為突破<code>同源政策</code>(Same-origin policy)，而可讓不同網域之間一樣可以靠xhr取得資料的手段。</p>

<!--more-->


<hr />

<h2>JSONP由來：</h2>

<p>在探討JSONP前一樣先來看看它是為何而生的呢？因為AJAX基於安全的考量，不允許對不同網域的網站發送請求，以防某些網站會在背後偷偷試圖連到其他網站去幹壞事（如：銀行網站之類的）；但跨域的AJAX需求仍然常發生，因此當然有諸多因應之道，常見的有下：</p>

<ul>
<li> 在同樣的網域下建立一支proxy api再例用這proxy去call外部的資源</li>
<li> 伺服器端必須<code>Access-Control-Allow-Origin</code>設為<code>*</code>或給某些特定網域</li>
<li> 利用script tag的<code>src</code>載入</li>
</ul>


<p>而JSONP主要則是利用其中的第三點來達成，這是因為src這個attribute不受是否跨網域的限制(e.g. img, script, iframe)，所以我們可以利用這個特性傳回一段<strong><em>可執行</em></strong>的js code，例如</p>

<p>對於某個外部請求，server會回傳一段js code</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>   <span class="n">alert</span><span class="p">(</span><span class="s1">&#39;WTF&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>而clinet這邊可以這樣來獲取</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'> <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://somewhere.com/test&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>結果就是會在頁面上跳出一句<code>WTF</code>，由此證明我們可以利用src不受跨網域限制的特性來克服以往AJAX所達不到的目的，而我們更進一步可以讓server端將希望回傳的資料(JSON)包成可執行的js code回傳給我們
如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>   <span class="nx">someFunction</span><span class="p">({</span> <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span><span class="p">,</span> <span class="nx">snsd</span><span class="o">:</span> <span class="s1">&#39;yoona&#39;</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>而我們只需要在clinet裡面先定義好<code>someFunction</code>這個function就可以發揮如同callback的效用達成跨網域的請求了!</p>

<h3>JSONP目的</h3>

<p>所以，JSONP主要就是讓server端將所有要回傳的資料包在任意名稱的function參數裡回傳給client端使用，<code>JSON with Padding</code>的名稱也非常貼切它的目的。而剛剛所提到任意名稱的function，是因為我們既然要事先定義該function，才可使用server回傳給我們的js code，那必然也得讓server要傳什麼名稱給我們，簡單的說就是需要動態的產生function名，而這只需要把function的名稱當做參數傳過去即可，而後端的處理可以這樣寫：</p>

<figure class='code'><figcaption><span>some_controller.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>   <span class="k">def</span> <span class="nf">jsonp</span>
</span><span class='line'>    <span class="vi">@data</span> <span class="o">=</span> <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Yoda&#39;</span><span class="p">,</span> <span class="ss">role</span><span class="p">:</span> <span class="s1">&#39;master&#39;</span> <span class="p">}</span><span class="o">.</span><span class="n">to_json</span>
</span><span class='line'>    <span class="vi">@func_name</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:callback</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>jsonp.js.erb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>   <span class="o">&lt;%=</span> <span class="err">@</span><span class="nx">func_name</span> <span class="o">%&gt;</span><span class="p">(</span><span class="o">&lt;%=</span> <span class="nx">raw</span> <span class="err">@</span><span class="nx">data</span> <span class="o">%&gt;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>client的code會長這樣</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>     <span class="nt">&lt;script&gt;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">say_hi</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;Hi &#39;</span><span class="o">+</span> <span class="nx">data</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://somewhere.com/test?callback=say_hi&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>JSONP 使用 jQuery</h2>

<h3>標準用法</h3>

<p>實際上JSONP不算是官方正式提出用來解決跨網域需求存取的解法，算是非官方的協定。然而JSONP本身也非使用xhr物件來達到跨網域的請求，但jQuery還是支援jsonp而且用法相當簡單：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>   <span class="kd">function</span> <span class="nx">test</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
</span><span class='line'>      <span class="c1">//do_something</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;http://somewhere.com/test&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;get&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">dataType</span><span class="o">:</span> <span class="s1">&#39;jsonp&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">jsonp</span><span class="o">:</span> <span class="s1">&#39;callback&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">jsonpCallback</span><span class="o">:</span> <span class="s1">&#39;test&#39;</span>
</span><span class='line'>  <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>只要把<code>dataType</code>設為<code>jsonp</code>即可。而參數<code>jsonp</code>: 預設為callback，所以是callback=?，如果jsonp設為foo那就是 foo=? 。</p>

<p><code>jsonpCallback</code>: 預設是由jQeury亂數產生的唯一值當做function name，如果 jsonpCallback設為bar，那就是 callback=bar。 最後前端就必須要有定義function bar讓他可以執行。</p>

<p>建議好像是讓兩者都為預設就可以了，因為cache的問題，亂數產生的function name像是callback=XXXXX就會每次都被視為新的request就比較不會有被cache住，而拿不到即時更新過資料的問題了。</p>

<h3>精簡用法</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>   <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;http://somewhere.com/test&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;get&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">dataType</span><span class="o">:</span> <span class="s1">&#39;jsonp&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
</span><span class='line'>      <span class="c1">//do_something</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">error</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="err">&#39;</span><span class="nx">fail</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>jsonp預設為callback，所以可以不需要寫，jsonpCallback也建議不用設定，使用預設的亂數值即可，而且聰明的jQuery會自動把回傳的data帶入success這個callback使用，也不需要額外在定義function去接了，非常方便！！</p>

<p>網路上看到使用$.getJSON網路上有可以這樣試，jQuery似乎會自動去偵測callback這個querystring(<del>不過本人還沒測試過</del>)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>   <span class="nx">$</span><span class="p">.</span><span class="nx">getJSON</span><span class="p">(</span><span class="s1">&#39;http://somewhere.com/test?callback=?&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
</span><span class='line'>      <span class="c1">//do_something</span>
</span><span class='line'>  <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上就是關於jsonp的學習心得與分享，如有錯誤或其他建議都歡迎指正～</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Is Base64]]></title>
    <link href="http://noelsaga.herokuapp.com/blog/2015/06/27/what-is-base64/"/>
    <updated>2015-06-27T16:00:55+08:00</updated>
    <id>http://noelsaga.herokuapp.com/blog/2015/06/27/what-is-base64</id>
    <content type="html"><![CDATA[<p>在從事web開發時，一定常常聽到<code>base64</code>，例如：rails裡會將cookie值採用base64編碼保護，而且在rails使用base64也相當容易，如：</p>

<figure class='code'><figcaption><span>rails使用base64 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>   <span class="n">encrypted_code</span> <span class="o">=</span> <span class="no">Base64</span><span class="o">.</span><span class="n">encode64</span> <span class="s2">&quot;Hello World&quot;</span>
</span><span class='line'>  <span class="c1"># 輸出 &quot;SGVsbG8gV29ybGQ=\n&quot;</span>
</span><span class='line'>  <span class="no">Base64</span><span class="o">.</span><span class="n">decode64</span> <span class="n">encrypted_code</span>
</span><span class='line'>  <span class="c1"># 輸出 &quot;Hello World&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>看起來似乎非常簡單使用跟沒什麼特別要學的成本，所以本篇教完了，結束&hellip;&hellip;..!?<br/>
當然沒這麼簡單，學習一項事物時，我覺得除了事物本身外，<strong><em>更重要的是我們為何要學習它？</em></strong>甚至去了解它的由來，我覺得對學習可以有更深的幫助，也較有趣味性。所以接下來我會講解<code>base64</code>的蓋要與它的使用目的。</p>

<!--more-->


<hr />

<h2>Base64由來:</h2>

<p>Base64的由來與電子郵件格式息息相關，最初在八零年代時(1982年RFC822規範文件)定義了傳統的電子郵件格式，而那時規定了只能傳輸<code>ASCII</code>，而這也導致了</p>

<ul>
<li>非英語字元不能在電子郵件中使用</li>
<li>電子郵件裡不能插入二進位檔案</li>
<li>電子郵件無法攜帶檔案附件</li>
</ul>


<p>而為了解決這個問題，90年代後工程師拓展了電子郵件的技術規範、並提出補充，造就了<code>MIME</code>的出現，以及為了轉換二進位制文件為ASCII字符而生的編碼，Base64等編碼方法的出現。</p>

<hr />

<h2>Base64介紹：</h2>

<p>Base64的介紹及原理在維基百科裡其實已經有詳細的講解及過程，在這我仍然簡單的介紹原理及運算並以維基百科提供的資料為參照。</p>

<p>Base64的64的由來是由<code>0~9</code>+<code>A~Z</code>+<code>a~z</code>＋<code>+</code>+<code>/</code>等64個字元所組成，而64為2的6次方，所以以6的位元為1個單位，因此如果3個byte共24位元長度得資料則除以6變成4個Base64字元，長度因此增加了<strong><em>約</em></strong>1/3的長度。若字元長度無法被6整除則會再補上0位元，並再最後產生的結果莫段加上1或2<code>=</code>字元符號(依補多少個0而定)，因此前面才會說長度增加<strong>大約</strong>為1/3。</p>

<p>而算法的過程為</p>

<ol>
<li>將文字轉為ASCII編碼</li>
<li>將ASCII編碼轉為二進位制</li>
<li>以6個字元為一組，若長度不夠被六整除則在最右邊補上0字元直到可被6整除</li>
<li>得到新的以6個字元為長度後則在最左邊補上2個0使之轉為二進位制資料並求出值</li>
<li>根據該值去對Base64編碼做索引</li>
<li>若在步驟3有補了4個0就要在最後結果尾端補上2個<code>=</code>，若2個0就要在最後結果尾端補上1個<code>=</code></li>
</ol>


<p>範例:</p>

<p><code>Bar</code></p>

<ol>
<li>66,        97,        114</li>
<li>01000010, 01100001,   01110010</li>
<li>010000, 100110, 000101, 110010</li>
<li>0010000(16), 00100110(38), 00000101(5), 00110010(50)</li>
<li>查<a href="http://www.dotnetspider.com/attachments/Resources/41901-12628-base-64-table.png">Base64表</a>後得到<code>QmFy</code>即為所求</li>
<li>步驟3沒有補0故此步驟不需要做</li>
</ol>


<p>最終結果為<code>Qmfy</code>比本來的<code>Bar</code>長度多了1/3。</p>

<h4>等等</h4>

<p>但是我們這只是用英文轉啊？！好像沒有意義。如果想轉中文怎麼辦？其實只有一開始多增加了一些步驟，要先根據漢字編碼如採用的是<code>utf-8</code>or<code>GBK</code>等不同編碼，先轉為二進位制再帶入上面的過程則可求得該漢字的Base64結果。</p>

<p>若不會把漢字依據<code>UTF-8</code>轉為二進位制的話，可以來<a href="https://sites.google.com/site/nathanlexwww/tools/utf8-convert">這邊</a>轉。</p>

<hr />

<h2>Base64目的與運用：</h2>

<p>到這裡我們對<code>base64</code>已經有大致了理解，base64的主要目的就是將非ASCII字元轉為可列印字符，所以我們也來看看這可以適合應用在哪些地方</p>

<ul>
<li>電子郵件的格是轉換</li>
<li>可避免二進位制檔案在網路傳輸過程中因某些格式或是協定將部分內容視為特殊符號而造成的遺漏或失真</li>
<li>HTTP請求中可將較長的資訊編碼後放在url參數或表單中，同樣可避免特殊符號造成的影響</li>
<li>隱藏資訊的可讀性（但Base64不能視作加密方法，因為可以被解譯）</li>
<li>Data URI(HTML中可直接攜帶二進位制檔案，並且透過MIME所使用)</li>
</ul>


<p>除了上述當然也還有其他得應用，但常見的幾個大概就是這樣，到這邊希望大家對Base64的使用疑惑已經解開了，如果有什麼對Base64的心發現或是我文章中有不對的地方都歡迎大家分享或指教～</p>

<h4>參考</h4>

<p><a href="http://www.ruanyifeng.com/blog/2008/06/base64.html">Base64笔记</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Each_with_object vs Reduce]]></title>
    <link href="http://noelsaga.herokuapp.com/blog/2015/06/03/ruby-each-with-object-vs-reduce/"/>
    <updated>2015-06-03T23:37:29+08:00</updated>
    <id>http://noelsaga.herokuapp.com/blog/2015/06/03/ruby-each-with-object-vs-reduce</id>
    <content type="html"><![CDATA[<p>又發現一個好用的方法<code>each_with_object</code>，是屬於<em>Enumerable</em>的方法之一，最近看前輩的code才發現的，算是each家族中的一員，不得不說ruby內建的許多列舉方法實在是非常方便啊！它與前陣子介紹的<code>reduce</code>目的上有點類似，但似乎更為易懂，直接來看範例吧！</p>

<!--more-->




<figure class='code'><figcaption><span>each_with_object 範例一 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>   <span class="sx">%w(red blue yello black)</span><span class="o">.</span><span class="n">each_with_object</span><span class="p">({})</span> <span class="k">do</span> <span class="o">|</span><span class="n">value</span><span class="p">,</span> <span class="nb">hash</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">hash</span><span class="o">.</span><span class="n">store</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">value</span><span class="o">.</span><span class="n">capitalize</span> <span class="o">+</span> <span class="s1">&#39;!&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1"># =&gt; {&quot;red&quot;=&gt;&quot;Red!&quot;, &quot;blue&quot;=&gt;&quot;Blue!&quot;, &quot;yello&quot;=&gt;&quot;Yello!&quot;, &quot;black&quot;=&gt;&quot;Black!&quot;}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>介紹</h2>

<p>範例一其實就只是把一個陣列迭代做些處理後存入hash裡，然後依序下去直到迭代完成，是不是很熟悉呢？沒錯，類似的功能<code>reduct/inject</code>也做得到，甚至你單用each也是可以，但是<code>each_with_object</code>更方便簡單，<strong>你必須先指定一個參數</strong>當做一個容器的初始值，此例就是hash，然後每次迭代之後他會自動記住容器的狀態，並自動代入下次迭代，這裡與<code>reduce</code>不太一樣，寫法上是更簡當方便，剛剛的範例如果用<code>reduce</code>寫的話則是：</p>

<figure class='code'><figcaption><span>reduce 範例一 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>   <span class="sx">%w(red blue yello black)</span><span class="o">.</span><span class="n">reduce</span><span class="p">({})</span> <span class="k">do</span> <span class="o">|</span><span class="n">result</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span>
</span><span class='line'>      <span class="n">result</span><span class="o">.</span><span class="n">store</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">value</span><span class="o">.</span><span class="n">capitalize</span> <span class="o">+</span> <span class="s1">&#39;!&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">result</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1"># =&gt; {&quot;red&quot;=&gt;&quot;Red!&quot;, &quot;blue&quot;=&gt;&quot;Blue!&quot;, &quot;yello&quot;=&gt;&quot;Yello!&quot;, &quot;black&quot;=&gt;&quot;Black!&quot;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>最後輸出是一樣的，但<code>reduce</code>我們必須自己把結果擺在最後一行(<del>return</del>)，<code>reduce</code>才會把它當作下次繼續迭代的<strong><em>結果值</em></strong>，這點對某些人可能比較不是那麼地直覺。</p>

<p>來看看另一個<code>each_with_object</code>的應用範例，讓我們來使用該函式做出類似select的效果</p>

<figure class='code'><figcaption><span>each_with_object 範例二：模仿select </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>   <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">9</span><span class="p">)</span><span class="o">.</span><span class="n">each_with_object</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">value</span><span class="p">,</span> <span class="n">array</span><span class="o">|</span>
</span><span class='line'>      <span class="n">array</span> <span class="o">&lt;&lt;</span> <span class="n">value</span> <span class="k">unless</span> <span class="p">(</span><span class="n">value</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>   <span class="k">end</span> 
</span><span class='line'>    <span class="c1"># =&gt; [1, 3, 5, 7, 9]</span>
</span></code></pre></td></tr></table></div></figure>


<p>基本上你可以依需求或你傳入的參數類型來自由使用該方法進而達到任何可能的功能，而可傳入的參數可以是array、hash、甚至是openstruct，所以object或hashie當然應該也可以，有興趣的人可以自己玩玩看。</p>

<h2>與reduce差別</h2>

<p>雖然這個方法看似很潮、很精簡，但還是有些使用上的限制與和<code>reduce</code>的差別，像是:</p>

<ol>
<li>each_with_object必須傳入一個參數，reduce則不然</li>
<li>each_with_object接受的參數必須是容器型，不能是純值</li>
<li>each_with_object程式區塊的參數順序與reduce相反，each家族都是以個別值為第一個參數</li>
</ol>


<p>第一與第三點應該非常直覺好懂，第二點則需要說明一下，因為each_with_object可以自己記住迭代回傳結果，而該結果也必須在使用該方法時就給定，如果此時你給他的參數是純值像是int、str、boolean等型態的物件，則會因為屬於純值而無法改變或操縱物件本身，所以永遠都會回傳自己，如以下範例:</p>

<figure class='code'><figcaption><span>each_with_object 範例三：參數給數字 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>   <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">5</span><span class="p">)</span><span class="o">.</span><span class="n">each_with_object</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">value</span><span class="p">,</span> <span class="n">array</span><span class="o">|</span>
</span><span class='line'>      <span class="n">value</span> <span class="o">*</span> <span class="n">array</span>
</span><span class='line'>   <span class="k">end</span> 
</span><span class='line'>  <span class="c1"># =&gt; 1 而非 120</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上就是該方法的介紹與分享，如果有問題或是發現小弟有哪邊有錯誤都請歡迎指教唷，感謝各位</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript This]]></title>
    <link href="http://noelsaga.herokuapp.com/blog/2014/09/21/javascript-this-zhi-biao/"/>
    <updated>2014-09-21T16:59:57+08:00</updated>
    <id>http://noelsaga.herokuapp.com/blog/2014/09/21/javascript-this-zhi-biao</id>
    <content type="html"><![CDATA[<p>this是物件導向語言裡很重要的觀念與應用，像是Java, PHP等等。而自己第一次聽到這名詞是大學時學習Java的時候，後來接觸php時也又碰到了this（php物件導向也是由Java借鏡來的），但對this到底為何其實都不是很懂，被困擾了很久，單看this字面的意思還是讓人覺得抽象，不過當時也有不少同學對於this也都是一知半解，但寫程式的時候還是會知道該怎麼使用它，個人覺得這不是個好的現象，所以今天來分享一下對this的學習心得，並主要以<strong><em>javascript</em></strong>作為範例。</p>

<!-- more -->


<h2>什麼是this?</h2>

<p>this代表當前的物件，更直白的說就是正在使用的物件為何，我們會用this來代表，這是很重要的一點。一般而言會呼叫this的場合僅在method裡面使用，而this代表的對象就是函式所屬的物件</p>

<figure class='code'><figcaption><span>this 簡單使用方式 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>   <span class="kd">var</span> <span class="nx">zilla</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;godzilla&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">size</span><span class="o">:</span> <span class="s1">&#39;100M 60000 tons&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">color</span><span class="o">:</span> <span class="s1">&#39;black&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">sayHello</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Hi, I am &quot;</span><span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// 這裡的this也可改用zilla來代表，效果是一樣的，因為此時this即是指zilla</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">zilla</span><span class="p">.</span><span class="nx">sayHello</span><span class="p">());</span> <span class="c1">//  Hi, I am godzilla</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>this如何決定？</h2>

<p>this的值是由環境<code>執行期間</code>決定，所以要看呼叫該方法時的環境決定，屬於window（全域範圍）或某特定物件:</p>

<figure class='code'><figcaption><span>this 的歸屬 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>   <span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;Windows\&#39;s Godzilla&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">myObject</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Object\&#39;s Godzilla&quot;</span> <span class="p">};</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">var</span> <span class="nx">getName</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="nx">myObject</span><span class="p">.</span><span class="nx">getName</span> <span class="o">=</span> <span class="nx">getName</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nx">myObject</span><span class="p">.</span><span class="nx">getName</span><span class="p">();</span>
</span><span class='line'>  <span class="c1">//Object&#39;s Godzilla</span>
</span><span class='line'>  <span class="nx">getName</span><span class="p">();</span>
</span><span class='line'>  <span class="c1">//Windows&#39;s Godzilla</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>當方法裡面包覆方法時，this會指向全域物件</h2>

<p>當物件裡面含有巢狀方法時（方法裡面又包裹方法），則this會迷失方向，因此不會參考該物件，轉而參考全域物件，也就是window物件</p>

<figure class='code'><figcaption><span>碰到巢狀時，this會指向全域物件 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>   <span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;Window Godzilla&quot;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">myObject</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>     <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Object Godzilla&quot;</span><span class="p">,</span>
</span><span class='line'>     <span class="nx">sayHellow</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>     <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Hello &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">)},</span>
</span><span class='line'>     <span class="nx">lostThis</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>       <span class="kd">var</span> <span class="nx">gg</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(){</span>
</span><span class='line'>          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span> <span class="c1">//在這裡會印出Window Godzilla 而非 Object Godzilla</span>
</span><span class='line'>       <span class="p">}()</span>
</span><span class='line'>     <span class="p">}</span> 
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">myObject</span><span class="p">.</span><span class="nx">sayHellow</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>即使傳入一個匿名方法，而該方法裡面又有呼叫到this時，依然會轉而參考window物件</p>

<figure class='code'><figcaption><span>傳入一個帶有呼叫this匿名函式給物件方法 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;Window Object&quot;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">myObject</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>     <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Object Godzilla&quot;</span><span class="p">,</span>
</span><span class='line'>     <span class="nx">sayHellow</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">callback</span><span class="p">){</span>
</span><span class='line'>     <span class="nx">callback</span><span class="p">()</span>
</span><span class='line'>     <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Hello &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">)},</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="nx">myObject</span><span class="p">.</span><span class="nx">sayHello</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Hellow &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="p">)})</span>
</span><span class='line'><span class="c1">// 印出</span>
</span><span class='line'><span class="c1">// Hellow Window Godzilla</span>
</span><span class='line'><span class="c1">// Hello Object Godzilla</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>如果怕this迷失的話，我們可以明確指定給它</h2>

<p>有很多方法可以避免this值迷失，常見的有下列幾種</p>

<br>


<h3>1. 依靠範圍練尋找，把this指定給明確變數</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>   <span class="kd">var</span> <span class="nx">myObject</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Object Godzilla&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">sayHello</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">that</span> <span class="o">=</span> <span class="k">this</span> <span class="c1">//就在這裡指定</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">useThat</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">that</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span> <span class="p">}(</span><span class="nx">that</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2. 使用call方法來明確指定使用哪個物件當做this</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;Window Name&quot;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">test</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">test</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">test</span><span class="p">.</span><span class="nx">call</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Yoda&quot;</span><span class="p">})</span>
</span><span class='line'>  <span class="c1">//如果test方法有定義參數的話，則擺在this參數後方</span>
</span><span class='line'>  <span class="c1">//test(this, arg1, arg2)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3. 使用apply方法來明確指定使用哪個物件當做this</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;Window Name&quot;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">test</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">test</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">test</span><span class="p">.</span><span class="nx">apply</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Yoda&quot;</span><span class="p">})</span>
</span><span class='line'>  <span class="c1">//使用方式同call，差別在於如果有其他參數要使用是全部擺在一個陣列，並在this之後的第二個參數傳入</span>
</span><span class='line'>  <span class="c1">//test(this, [arg1, arg2])</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>使用new來建立函式時，this會參考到該new出來的instance</h2>

<p>聽來有點饒舌，但大概就是這樣的意思，此舉用法上很接近其他oop的實體變數的感覺，直接看範例</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>   <span class="kd">var</span> <span class="nx">Godzilla</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;Godzilla&quot;</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">gender</span> <span class="o">=</span> <span class="s2">&quot;Male&quot;</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="s2">&quot;Black&quot;</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">getName</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Hi, my name is &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">jr</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Godzilla</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">jr</span><span class="p">.</span><span class="nx">getName</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>若不使用new的話，則規則同一般使用方式</p>

<h2>在prototype裡使用this，則會參考到該建構式的instance</h2>

<p>如果說前一則提到的觀念像是使用實體變數的感覺，這邊則像是實體方法裡使用到實體變數的概念，因為定義在Object.prototype裡的方法可以被共享，之後該Object的實例共享，所以我們可以把它看做是實體方法，裡面呼叫的this則自然是參考到該實體的變數囉：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">Godzilla</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;Godzilla&quot;</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">gender</span> <span class="o">=</span> <span class="s2">&quot;Male&quot;</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="s2">&quot;Black&quot;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'><span class="nx">Godzilla</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getName</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Hi, my name is &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">jr</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Godzilla</span><span class="p">()</span>  
</span><span class='line'><span class="nx">jr</span><span class="p">.</span><span class="nx">getName</span><span class="p">()</span>
</span><span class='line'>  
</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>結論</h2>

<p>其實this觀念並沒有這麼難懂，且大多數oop的this觀念大略是相同的，都是在幫我們釐清我們當前使用或定義的對象為何罷了。只是可能依語言特性而個有些用法上的差異等等，例如ruby裡是用self幾乎等同this的；以js危範例介紹，是因菜自js上物件的表達方式比較多變，所以this的變化也就更多元，較容易搞混，但懂得原理，只要稍微停下來思考相信很快就在也不會被難倒了，或搞混了，<strong>千萬不要迷失自我為何啊</strong>。</p>

<p>以上若有錯誤或其他建議都歡迎告知或討論唷，感謝^^</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript Function]]></title>
    <link href="http://noelsaga.herokuapp.com/blog/2014/08/24/javascript-function/"/>
    <updated>2014-08-24T20:16:53+08:00</updated>
    <id>http://noelsaga.herokuapp.com/blog/2014/08/24/javascript-function</id>
    <content type="html"><![CDATA[<br>


<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Javascript(以下簡稱JS)的函式比以往所認識語言C, JAVA, PHP來得特別些。因為第一份工作主要都是在寫Rails所以接觸Ruby，覺得這語言很酷很方便，然後也因為今年開始自學JQuery也順便想弄懂Javascript的原理而開始接觸，之前有朋友說其實Ruby有些地方是從Javascript借鏡的，當時因為對JS還很不熟，所以也沒體會，但隨著看的範例多跟練習越來越多，也開始有所感觸，所以也趁著這機會記錄一下JS相關的function應用：</p>

<figure class='code'><figcaption><span>一般使用 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">godzilla</span><span class="p">(</span><span class="nx">food</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;I eat the &#39;</span><span class="o">+</span><span class="nx">food</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;I am a monster!&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// godzilla(&#39;fish&#39;);</span>
</span><span class='line'>    <span class="c1">//I eat the fish   </span>
</span><span class='line'>    <span class="c1">//I am a monster！</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;這是最基本的使用方式，跟其他語言大致相當</p>

<!-- more -->


<hr />

<h2>匿名Function</h2>

<br>


<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;也就是所謂的匿名函式，為什麼稱作匿名呢？那是因為對JS來說function本身可以視為一個物件（它也確實是個物件），而我們把JS的function視為一個可傳遞的值或物件，所以我們也就可以把它傳入一個變數或是當做參數使用：</p>

<p> <figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'> <span class="kd">var</span> <span class="nx">godzilla</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">food</span><span class="p">){</span>
</span><span class='line'>   <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;I eat the &#39;</span><span class="o">+</span><span class="nx">food</span><span class="p">);</span>
</span><span class='line'>   <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;I am a monster!&#39;</span><span class="p">);</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'> <span class="k">typeof</span> <span class="nx">godzilla</span>
</span><span class='line'> <span class="c1">// &quot;function&quot;</span>
</span><span class='line'> <span class="nx">godzilla</span><span class="p">(</span><span class="s1">&#39;fish&#39;</span><span class="p">);</span>
</span><span class='line'>   <span class="c1">//I eat the fish   </span>
</span><span class='line'>   <span class="c1">//I am a monster！</span>
</span></code></pre></td></tr></table></div></figure></p>

<br>


<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;當然，可以塞入一個變數，那我們就可以像是變數一樣的任意使用它，又或著是把它來當做參數給另一個變數做callback使用：</p>

<p> <figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">monstersShow</span><span class="p">(</span><span class="nx">monster</span><span class="p">,</span> <span class="nx">godzilla</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;I am the &#39;</span><span class="o">+</span> <span class="nx">monster</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">godzilla</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="nx">monstersShow</span><span class="p">(</span><span class="s1">&#39;KingKong&#39;</span><span class="p">,</span> <span class="nx">godzilla</span><span class="p">);</span>
</span><span class='line'><span class="c1">// I am the KingKong </span>
</span><span class='line'><span class="c1">// I eat the undefined</span>
</span><span class='line'><span class="c1">// I am a monster! </span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure></p>

<br>


<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上述作法其實比較多此一舉，因為既然它是可以是個物件，那其實在當參數使用的時候也不見得需要在把它先塞到一的變數，而是在呼叫該function的時候直接定義欲傳入function，所以我們可以直接寫：</p>

<p> <figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">monstersShow</span><span class="p">(</span><span class="s1">&#39;KingKong&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="kd">function</span><span class="p">(</span><span class="nx">food</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;I eat the &#39;</span><span class="o">+</span><span class="nx">food</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;I am a monster!&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure></p>

<br>


<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;直接這樣寫也可以work，而且這種作法在JQuery的event handler相當常見；此外在ruby時，我們所使用的Proc, lambda其實就是承襲JS的匿名函式過來的，當然啦，當初Matz是不是真的被JS啟發我也不確定啦～</p>

<p> 如果要更謹慎地使用callback，可以這樣：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>   <span class="kd">function</span> <span class="nx">godzilla</span><span class="p">(</span><span class="nx">food</span><span class="p">,</span> <span class="nx">callback</span><span class="p">){</span>
</span><span class='line'>     <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;I want to eat &#39;</span><span class="o">+</span> <span class="nx">food</span><span class="p">);</span>
</span><span class='line'>     <span class="k">if</span><span class="p">(</span> <span class="k">typeof</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;function&#39;</span><span class="p">){</span> <span class="c1">//判斷callback是否為function</span>
</span><span class='line'>       <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;callback is actually a function, then we would execute it..&#39;</span><span class="p">);</span>
</span><span class='line'>       <span class="nx">callback</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>  <span class="nx">godzilla</span><span class="p">(</span><span class="s1">&#39;fish&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Dear Doctort, you made it!&#39;</span><span class="p">);</span> <span class="p">});</span>
</span><span class='line'>  <span class="c1">// 輸出</span>
</span><span class='line'>  <span class="c1">// I want to eat fish</span>
</span><span class='line'>  <span class="c1">// Dear Doctort, you made it!</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<br>   


<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;更理解了嗎？其實callback就只是個參數代稱而已，你想怎麼稱呼它都可以，原理是你只要想像你欲傳遞的function全都被指定給callback，然後再以callback()來使用傳遞進去的function。</p>

<hr />

<h2>Function的參數陣列arugments</h2>

<br>


<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在JS中的function其實都有個預設好的陣列參數arguments，我們都知道相對於C家族的語言，JS是很自由的，像是在呼叫的function時，即使多傳幾個沒定義的參數，程式也不會噴錯，或是明明設有參數的function，直接不帶參數呼叫該function，也是不會噴錯，只是需要用到該參數的地方會顯示undefined而已。</p>

<br>


<p> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然而，剛剛都只是題外話，JS的function真正酷的地方在那個預設的陣列參數arugments，其實他不是真正的參數也不是個真的陣列，我知道這樣講很抽像，但只要把它想成event在 event handler裡的這個事件物件的參數就很好懂了；而這邊這個arguments也有個屬性叫做length，顧名思義就是你傳入這個function的參數長度，而我們傳入的參數其實也可以藉由arguments[i]來呼叫。所以也可以把它想做你傳入的參數其實全都存到這個arguments陣列裡去了，那我們在定義一個JS的function時，其實你不用事先定義任何傳入的參數也可以，然後可以直接靠arguments來取用你強行塞進去這個function裡的參數，但是這樣做不見得是個好方法就是，因為你必須很清楚你傳入的參數位置為何，老是這樣argument[0], argument[1]的呼叫似乎有點不易閱讀；直接看個例子吧：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">arrayPlus</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">total</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">total</span> <span class="o">+=</span> <span class="nx">arguments</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">total</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arrayPlus</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="c1">// 15</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<br>  


<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arguments當然還有其他功用，但這就得自己多去摸索了，如果想更詳細了解arguments也可以去查文件囉！</p>

<br>


<hr />

<h2>進階範例：運用Prototype和Callback來自定forEach給Array</h2>

<br>


<p>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在JQuery跟Ruby裡都已經預設有forEach或each等方便給array或hash使用的方法，簡單地說，此function會直接迭代呼叫它的array或hash內的元素並傳給它本身的callback方法，像是[1,2,3,4,5].forEach(function(element){ console.log(element);} )，其中傳給forEach的參數匿名function正是之前提到的callback方法（一般來說就是可當參數傳入使用的方法），而該function的參數element正是被迭代入的array或hash元素。</p>

<br>


<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;這個forEach等會自動走訪array或hash的元素並且讓他們執行某callback是種直覺右方變得用法，在以前的JAVA或PHP要做到同樣的事寫起來就比較麻煩，code會多好幾行甚至可能數以倍計，而到底這種方便的方法是怎麼被實作入JS的勒，用以下的範例來試試看吧！！在之中我們會先用到prototype這物件來實現JS的繼承功能（把想被繼承的方法或屬性塞入給prototype就可以了，更深入了解prototype將會在另外討論）:
 <figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">myEach</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">callback</span><span class="p">){</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">callback</span><span class="p">(</span><span class="k">this</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span><span class="c1">//這邊是先定義myEach並且透過prototype指定給Array，讓之後所有的Array都可以用此方法</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">].</span><span class="nx">myEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">element</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">element</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="c1">//輸出</span>
</span><span class='line'><span class="c1">//1</span>
</span><span class='line'><span class="c1">//2</span>
</span><span class='line'><span class="c1">//3</span>
</span><span class='line'><span class="c1">//4</span>
</span><span class='line'><span class="c1">//5</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure></p>

<br>     


<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;這是我之前的高手同事建議我如果有興趣可以去深入探討的地方，可以去多研究Design Patterns，看看JQuery或是JS一些方便、優秀的功能是如何實作出的，對JS的功力會有所幫助！</p>

<br>


<hr />

<h2>Function的其他使用 &ndash; 自我調用（Self-Invoking）</h2>

<br>


<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;簡單地說就是宣告完function便利及執行，而且該function只會執行一次，之後無法在用，有點像oop的建構子的概念:
 <figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">drink</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;I like to have a cup of &#39;</span><span class="o">+</span> <span class="nx">drink</span><span class="p">);</span>
</span><span class='line'><span class="p">})(</span><span class="s1">&#39;ice tea&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">// 輸出</span>
</span><span class='line'><span class="c1">// &#39;I like to have a cup of ice tea&#39;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>
 <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;這有什麼用處呢？一般是用來初始化或是只需執行一次的任務，但其實本人自己也沒用過幾次，所以就先學起來吧。
 <figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">drink</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;I like to hava a cup of &#39;</span><span class="o">+</span> <span class="nx">drink</span><span class="p">);</span>
</span><span class='line'><span class="p">}(</span><span class="s1">&#39;ice tea&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">// 輸出</span>
</span><span class='line'><span class="c1">// I like to have a cup of ice tea</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>
 <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;這樣寫也work，但是好像更多此一舉了點就是。</p>

<hr />

<h2>Function的其他使用 &ndash; 內部函數</h2>

<br>


<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;簡單地說，就是function裡面又定義function，而在內部的function就稱為內部或私有function，不能被直接呼叫，而內部function的範圍內的變數也無法被外部function所存取使用。另一方面，對於內部function來說，則有發生closure（閉包）的機會，就是內部function可以存取外部function的閒置變數，拿近來使用，因此延長了該閒置變數的存活期間，詳細的closure介紹與使用如果有機會再另外做記錄，這裡先來給個簡單的範例：</p>

<p> <figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">outer</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">outerSpace</span> <span class="o">=</span> <span class="s1">&#39;space godzilla&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">outerSpace</span> <span class="o">+</span> <span class="s1">&#39;is a super monster!&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">inner</span><span class="p">(){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">innerSpace</span> <span class="o">=</span> <span class="s1">&#39;Just godzilla&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">innerSpace</span> <span class="o">+</span> <span class="s1">&#39;is local monster and &#39;</span> <span class="o">+</span> <span class="nx">outerSpace</span> <span class="o">+</span> <span class="s1">&#39;is not!&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">inner</span><span class="p">();</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">inner</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">outer</span><span class="p">();</span>
</span><span class='line'><span class="c1">// 輸出</span>
</span><span class='line'><span class="c1">// space godzillais a super monster!</span>
</span><span class='line'><span class="c1">// Just godzillais local monster and space godzillais not! </span>
</span><span class='line'><span class="nx">inner</span><span class="p">();</span>
</span><span class='line'><span class="c1">// ReferenceError: inner is not defined   失敗</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">getInner</span> <span class="o">=</span> <span class="nx">outer</span><span class="p">();</span>
</span><span class='line'><span class="c1">// space godzillais a super monster!                                             </span>
</span><span class='line'><span class="c1">// Just godzillais local monster and space godzillais not! </span>
</span><span class='line'><span class="nx">getInner</span><span class="p">();</span>
</span><span class='line'><span class="c1">// Just godzillais local monster and space godzillais not! </span>
</span><span class='line'><span class="nx">outer</span><span class="p">()();</span>
</span><span class='line'><span class="c1">// space godzillais a super monster!</span>
</span><span class='line'><span class="c1">// Just godzillais local monster and space godzillais not! </span>
</span><span class='line'><span class="c1">// Just godzillais local monster and space godzillais not!     多出現了一次</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure></p>

<br>


<p>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;來解釋吧，當第一次直接呼叫outer()時，結果很直覺的就是跑了它該跑的。那我想直接呼叫inner的話勒，則會顯示失敗的錯誤訊息，因為內部function不能直接使用。然後接著我再17行的地方又把outer()的回傳結果傳給變數getInner，因為第9行outer有定義return Inner，所以此時getInner就代表Inner了，所以可以直接使用！！而至於為何會有18,19行的關係是因為小弟這隻範例程式寫的不夠好，因為只要呼叫到outer();無論如何都會先執行一次啊，所以就會有那兩行結果。而最後，第22行是直接靠outer呼叫來執行Inner的結果，但這種作法其實會先執行一次outer本身後才跑Inner，所以第25行才會又出現一次。</p>

<br>


<p>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其實回顧一下第6行的outerSpace，它是屬於外部function的變數，但是仍然可以被內部function使用，也因此延長它的存活時間，這算是種closure的基本例子。而這outerSpace對內部function來說我們可以稱作為閒置變數，你也可以覆寫它，然而因為JS的closure是綁住變數本身而非變數的值，所以一旦覆寫了話，當然也會連動影響到外部function的outerSpace，範例如下：</p>

<p> <figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">outer</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">outerSpace</span> <span class="o">=</span> <span class="s1">&#39;space godzilla&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">outerSpace</span> <span class="o">+</span> <span class="s1">&#39;is a super monster!&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">inner</span><span class="p">(){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">innerSpace</span> <span class="o">=</span> <span class="s1">&#39;Just godzilla&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">innerSpace</span> <span class="o">+</span> <span class="s1">&#39;is local monster and &#39;</span> <span class="o">+</span> <span class="nx">outerSpace</span> <span class="o">+</span> <span class="s1">&#39;is not!&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">outerSpace</span> <span class="o">=</span> <span class="s1">&#39;space godzilla is changed from inner!&#39;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">inner</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">outerSpace</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">inner</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">outer</span><span class="p">();</span>
</span><span class='line'><span class="c1">// 輸出</span>
</span><span class='line'><span class="c1">// space godzilla is a super monster!</span>
</span><span class='line'><span class="c1">// Just godzilla is local monster and space godzilla is not!</span>
</span><span class='line'><span class="c1">// space godzilla is changed from inner!</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure></p>

<br>


<p>在第7行的地方又覆寫了一次outSpace所以最後outer輸出的outerSpace也跟著被改變了！</p>

<br>


<h3>目前關於Function的部份就先寫到這，期待下篇應用再繼續努力，有問題或錯誤的話歡迎指正，感謝～！</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Methods Map Reduce]]></title>
    <link href="http://noelsaga.herokuapp.com/blog/2014/08/22/ruby-methods-map-reduce/"/>
    <updated>2014-08-22T00:36:38+08:00</updated>
    <id>http://noelsaga.herokuapp.com/blog/2014/08/22/ruby-methods-map-reduce</id>
    <content type="html"><![CDATA[<br>


<h2>關於迭代（iterator）</h2>

<br>


<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;簡單的說，迭代就是重複某一過程，若以coding來，迭代器可以幫助我們走訪array或hash的每一個元素並執行某些要求或命令，而ruby則是善用迭代來讓我們更少地直接使用傳統的迴圈功能，以讓程式可以更精簡、直覺。而ruby內建的迭代函式真的很多，也非常的好用，常見的如select, find ,find_all, reject&hellip;等可以幫我們快速迭代array或是hash甚至物件內的元素，以快速達到某些目的，例如我們想找到陣列中的偶數:</p>

<!-- more -->


<h3>ruby內建迭代函式寫法</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="o">].</span><span class="n">find_all</span> <span class="k">do</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span>
</span><span class='line'>  <span class="n">n</span><span class="o">%</span><span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># 結果 [2,4,6,8]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>傳統迴圈寫法:</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">array</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="o">]</span>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">n</span> <span class="k">in</span> <span class="n">array</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="n">n</span> <span class="k">if</span> <span class="n">n</span><span class="o">%</span><span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1">#result: [2,4,6,8]</span>
</span><span class='line'><span class="n">result</span><span class="o">.</span><span class="n">clear</span> <span class="c1"># 洗白</span>
</span><span class='line'><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="n">i</span><span class="o">&lt;</span><span class="n">array</span><span class="o">.</span><span class="n">length</span><span class="p">)</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="k">if</span> <span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]%</span><span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># result: [2,4,6,8]</span>
</span></code></pre></td></tr></table></div></figure>


<br>


<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;寫慣c、java或php的人可能較熟習傳統迴圈寫法，雖然可以達成功能，但既然ruby已經幫我們都包成好用的迭代函式，那我們何不好好善用呢？！當然熟悉傳統迴圈的寫法也是可以讓我們理解迭代函式背後的原理，但在使用上建議各位多多利用這些函式吧，在ruby中，我們將會習慣使用迭代函式而非迴圈。</p>

<p>   常使用的迭代函式像有select, find, find_all, each, each_with_index, collect, reject, delete_if, grep, any?, all?, sort, sort_by, map, reduce等逐繁不及備載，而許多迭代函式的功用也非常相似，所以如何使用且看使用者習慣或喜好。</p>

<hr />

<h2>Map函式</h2>

<br>


<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;map函式與each最大的不同是他會回傳一個新的陣列，而陣列的結果則是根據我們在程式區塊(block)裡所定義的來對原陣列做修改，其實這用途非常常見，像是我們有16名學生的原始成績，想幫他們做開根號在除以10後得到的加權成績:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">scores</span> <span class="o">=</span> <span class="o">[</span><span class="mi">68</span><span class="p">,</span> <span class="mi">84</span><span class="p">,</span> <span class="mi">92</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">79</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">85</span><span class="p">,</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">46</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">34</span><span class="o">]</span>
</span><span class='line'><span class="n">new_scores</span> <span class="o">=</span> <span class="n">scores</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span>
</span><span class='line'>  <span class="p">(</span><span class="no">Math</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="o">*</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span><span class="n">round</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># scores: [68, 84, 92, 34, 79, 82, 80, 85, 80, 31, 25, 45, 46, 30, 42, 34]</span>
</span><span class='line'><span class="c1"># new_scores: [82.46, 91.65, 95.92, 58.31, 88.88, 90.55, 89.44, 92.2, 89.44, 55.68, 50.0, 67.08, 67.82, 54.77, 64.81, 58.31]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">array</span> <span class="o">=</span> <span class="o">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="o">]</span><span class="p">,</span><span class="o">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="o">]</span><span class="p">,</span><span class="o">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="o">]</span><span class="p">,</span><span class="o">[</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="o">]]</span>
</span><span class='line'><span class="n">array</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span>
</span><span class='line'>  <span class="n">n</span><span class="o">.</span><span class="n">lasy</span> <span class="c1"># 只要最後一個元素</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># [2,4,6,8]</span>
</span><span class='line'>
</span><span class='line'><span class="n">t</span> <span class="o">=</span> <span class="no">Topic</span><span class="o">.</span><span class="n">scoped</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:name</span><span class="p">)</span>
</span><span class='line'><span class="n">t</span> <span class="o">=</span> <span class="no">Topic</span><span class="o">.</span><span class="n">scoped</span><span class="o">.</span><span class="n">pluck</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<br>


<p>所以，如果我們希望能回傳迭代後的結果則使用map</p>

<hr />

<h2>Reduce函式</h2>

<br>


<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reduce是比較抽象一點的迭代函式，但功能非常強大，它幫助我們逐一迭代元素外，還會保有一個結果變數可跟隨著迭代過程一起存活並最終回傳這個結果，而最後一行的值則是會迭代到下次做計算的初始值，所以最後一行切記不要使用puts或會回傳nil的函式，不然會哭哭唷！</p>

<br>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="o">].</span><span class="n">reduce</span> <span class="k">do</span> <span class="o">|</span><span class="n">sum</span><span class="p">,</span><span class="n">value</span><span class="o">|</span>
</span><span class='line'>   <span class="n">sum</span> <span class="o">+=</span> <span class="n">value</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># 45</span>
</span></code></pre></td></tr></table></div></figure>


<br>


<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其中在程式區塊內我們宣告的第一個變數sum即是那個所謂的結果變數，會一直跟隨迭代所存活並作為最後結果回傳，第二個變數value則是會跟隨陣列不斷迭代的個別值，然而我們也可以在一開始使用reduce時便賦予sum一個初始值；若我們沒有給初始值的話，sum則一開始會以陣列的第一個值，然後直接從第二的值開始做迭代。</p>

<br>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="o">].</span><span class="n">reduce</span><span class="p">(</span><span class="mi">50</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">sum</span><span class="p">,</span><span class="n">value</span><span class="o">|</span>
</span><span class='line'>   <span class="n">sum</span> <span class="o">+=</span> <span class="n">value</span>
</span><span class='line'> <span class="k">end</span>
</span><span class='line'> <span class="c1"># 95</span>
</span></code></pre></td></tr></table></div></figure>


<br> 


<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;看到這邊可能會覺得很方便，但不以為然，若是不用reduce，我們過去的作法會是先在迭代範圍外先宣告一個變數，才能在範圍內使用此變數，而reduce則是把它包在一起使用。</p>

<br>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span>
</span><span class='line'>  <span class="n">sum</span> <span class="o">+=</span> <span class="n">n</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># sum: 45</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#也可以這樣使用</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="o">].</span><span class="n">reduce</span><span class="p">(</span><span class="ss">:+</span><span class="p">)</span>
</span><span class='line'><span class="c1"># 45</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="o">].</span><span class="n">reduce</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="ss">:+</span><span class="p">)</span>
</span><span class='line'><span class="c1"># 55</span>
</span></code></pre></td></tr></table></div></figure>


<h3>模仿select功能</h3>

<br>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="o">].</span><span class="n">reduce</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">result</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="n">value</span> <span class="k">if</span> <span class="n">value</span><span class="o">%</span><span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">result</span>  <span class="c1"># 注意，這行如果不寫他會回傳nil，因為當1迭代進去時，不符合規則所以會回傳nil，這樣result下一次就會變成nil了而非[]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>模仿map功能</h3>

<br>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="o">].</span><span class="n">reduce</span><span class="p">()</span> <span class="k">do</span> <span class="o">|</span><span class="n">result</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="no">Math</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">value</span><span class="p">)</span><span class="o">/</span><span class="mi">10</span>
</span><span class='line'>  <span class="n">result</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript Object and Class]]></title>
    <link href="http://noelsaga.herokuapp.com/blog/2014/08/22/javascript-object-and-class/"/>
    <updated>2014-08-22T00:08:21+08:00</updated>
    <id>http://noelsaga.herokuapp.com/blog/2014/08/22/javascript-object-and-class</id>
    <content type="html"><![CDATA[<br>


<p>js也是個物件導向（object－oriented）的語言，但與我們傳統認知的C＋＋、Java的物件導向有所差異，但至少理念上還是一樣。物件會有所謂的成員也有人稱作屬性（property或attribute），指的是屬於該物件的某種數值或字串又或是其他的物件（ex: argument.length, event.data）。另外，物件也有方法（method，就是我們認知的function，ex: location.href(somefile.url) ），名稱上或許容易令人混淆，但大致來說一般的物件導向都是這麼稱呼與認知的。</p>

<!-- more -->


<br>


<h2>簡介</h2>

<br>


<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;js如我們所知是萬物皆物件的語言，但更進一步得講，其實<strong><em>並非所有萬物皆為物件</em></strong>，像是&#8221;foo&#8221;, 5, false等就不是物件，而是原始值，但我們依然可以對它們操作&#8221;foo&#8221;.length，難道它不是個物件嗎？其實這是js在我們使用原始值時會先幫我們把它進一步包裝成複合物件，等我們使用完後又會再釋放，當然我們在使用它的時候是感覺不到的，所以<strong><em>更正確的說法是，js裡所有的東西使用起來皆像物件！</em></strong></p>

<br>


<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般來說我們如果是 var myArray = []; 來宣告一個陣列物件，其實就隱含了我們做了var myArray = new Array();的用法而已，同理 var myObject = {} 也隱含了 var myObject = new Object()；而剛剛我們提到字串、數字、布林值不是物件而是原始值，但如果我們是用 var myString = new String(&ldquo;Godzilla&rdquo;)來產生字串的話，此時的myString就是物件了而非原始值了！！我們可以利用typeof 來判斷是否為物件，但function物件顯示的結果會是function而非object，但他依然是個物件唷！！如果想知道一物件是由誰所建構的則可以利用 constructor:</p>

<figure class='code'><figcaption><span>範例一 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">myString</span> <span class="o">=</span> <span class="s1">&#39;godzilla&#39;</span>
</span><span class='line'><span class="k">typeof</span> <span class="nx">myString</span><span class="p">;</span> <span class="c1">// string</span>
</span><span class='line'><span class="nx">myString</span><span class="p">.</span><span class="nx">constructor</span><span class="p">;</span> <span class="c1">// String</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">myStringObject</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">String</span><span class="p">(</span><span class="s1">&#39;godzilla&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">typeof</span> <span class="nx">myStringObject</span><span class="p">;</span> <span class="c1">// object  此時是物件而非原始值</span>
</span><span class='line'><span class="nx">myStringObject</span><span class="p">.</span><span class="nx">constructor</span><span class="p">);</span> <span class="c1">// String</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">myArray</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'><span class="k">typeof</span> <span class="nx">myArray</span> <span class="c1">// object</span>
</span><span class='line'><span class="nx">myArray</span><span class="p">.</span><span class="nx">constructor</span> <span class="c1">// Array</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">myArrayObject</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="k">typeof</span> <span class="nx">myArrayObject</span> <span class="c1">// object</span>
</span><span class='line'><span class="nx">myArrayObject</span><span class="p">.</span><span class="nx">constructor</span> <span class="c1">// Array</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">myFunction</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span> <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;haha&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="nx">tpyeof</span> <span class="nx">myFunction</span> <span class="c1">// function 注意</span>
</span><span class='line'><span class="nx">myFunction</span><span class="p">.</span><span class="nx">constructor</span> <span class="c1">// Function</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">myFunctionObject</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span><span class="s1">&#39;return name;&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">typeof</span> <span class="nx">myFunctionObject</span> <span class="c1">// function 注意</span>
</span><span class='line'><span class="nx">myFunction</span><span class="p">.</span><span class="nx">constructor</span>  <span class="c1">// Function</span>
</span></code></pre></td></tr></table></div></figure>


<p> 以上，大概是對js的物件基本介紹，這些有什麼用呢？其實個實際上並不能帶給你什麼酷炫的方式，但是對於觀念的釐清是很重要的！</p>

<hr />

<h2>自定類別</h2>

<br>


<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;js並無class，所以js的物件定義方使是靠關鍵字<code>function</code>來實現，跟我們一般直接定義一個function很類似：</p>

<figure class='code'><figcaption><span>範例二 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">godzilla</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span> <span class="c1">// godzilla只是個單純的function</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">mySon</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Son</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span> <span class="c1">// 利用function Son建立物件</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;I am &#39;</span> <span class="o">+</span> <span class="nx">mySon</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'><span class="nx">mySon</span><span class="p">.</span><span class="nx">changeName</span><span class="p">(</span><span class="s1">&#39;zilla&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Here comes my new name: &#39;</span> <span class="o">+</span> <span class="nx">mySon</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//利用function來制定我們想要的物件</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">Son</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">changeName</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">newName</span><span class="p">){</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">newName</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">godzilla</span><span class="p">(</span><span class="s1">&#39;I am in a function rather than a object!&#39;</span><span class="p">,</span> <span class="s1">&#39;Noel&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//輸出</span>
</span><span class='line'><span class="c1">//I am in a function rather than a object! </span>
</span><span class='line'><span class="c1">//Noel</span>
</span><span class='line'><span class="c1">//zilla </span>
</span><span class='line'>  <span class="err">利用</span><span class="nb">Object</span><span class="err">建構函式來產生物件</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">eva</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">eva</span><span class="p">.</span><span class="nx">pilot</span> <span class="o">=</span> <span class="s1">&#39;true four&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">eva</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="s1">&#39;purple&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">eva</span><span class="p">.</span><span class="nx">changePilot</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">person</span><span class="p">){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">pilot</span> <span class="o">=</span> <span class="nx">person</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="nx">eva</span><span class="p">.</span><span class="nx">pilot</span> <span class="c1">// true four</span>
</span><span class='line'>  <span class="nx">eva</span><span class="p">.</span><span class="nx">color</span> <span class="c1">// purple</span>
</span><span class='line'>  <span class="nx">eva</span><span class="p">.</span><span class="nx">changePilot</span><span class="p">(</span><span class="s1">&#39;zero&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">eva</span><span class="p">.</span><span class="nx">pilot</span> <span class="c1">// zero </span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyWay: Net::HTTP篇]]></title>
    <link href="http://noelsaga.herokuapp.com/blog/2014/08/21/ruby-net-http/"/>
    <updated>2014-08-21T23:53:47+08:00</updated>
    <id>http://noelsaga.herokuapp.com/blog/2014/08/21/ruby-net-http</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>這算是比較抽象的一篇，目前我也不是很清楚他實際的作用與原理，但先記錄一下我所學到的部分與應用。</p>

<h2>get_response</h2>

<p> 有時候我們會需要在程式裡發出一個request，簡單的說就想像我們直接在瀏覽器裡輸入一串url，此時我們就可以利用Net::HTTP.get_response(<em>你要的uri</em>)，會回傳一個物件，而我們可以根據這個物件做我們想要的應用，看程式碼教學：</p>

<!-- more -->


<figure class='code'><figcaption><span>使用講解:Get </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>   <span class="nb">require</span> <span class="s1">&#39;net/http&#39;</span>
</span><span class='line'>  <span class="c1">#方法一</span>
</span><span class='line'>  <span class="n">uri</span> <span class="o">=</span> <span class="no">URI</span><span class="o">.</span><span class="n">perse</span><span class="p">(</span><span class="s2">&quot;example.com/bar/dosomething&quot;</span><span class="p">)</span>  <span class="err">＃先解析成</span><span class="n">uri</span><span class="err">物件比較方便</span>
</span><span class='line'>  <span class="n">response</span> <span class="o">=</span> <span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="o">.</span><span class="n">get_response</span><span class="p">(</span><span class="n">uri</span><span class="p">)</span> <span class="c1"># 回傳物件就是我們要的東西，我們可以利用他做很多事</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">#方法二</span>
</span><span class='line'>  <span class="n">http</span> <span class="o">=</span> <span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">uri</span><span class="o">.</span><span class="n">host</span><span class="p">,</span><span class="n">uri</span><span class="o">.</span><span class="n">port</span><span class="p">)</span>
</span><span class='line'>  <span class="n">response</span> <span class="o">=</span> <span class="n">http</span><span class="o">.</span><span class="n">request</span><span class="p">(</span><span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="o">::</span><span class="no">Get</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">uri</span><span class="o">.</span><span class="n">request_uri</span><span class="p">))</span>  <span class="c1">#切記Get.new()的參數是request_uri不是uri</span>
</span><span class='line'>  
</span><span class='line'>  <span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="o">.</span><span class="n">get_print</span><span class="p">(</span><span class="n">uri</span><span class="p">)</span>   <span class="c1">#印出response.body</span>
</span><span class='line'>  
</span><span class='line'>  
</span><span class='line'>  <span class="n">response</span><span class="o">.</span><span class="n">code</span>          <span class="c1"># 回傳http狀態碼</span>
</span><span class='line'>  <span class="n">response</span><span class="o">.</span><span class="n">body</span>          <span class="c1"># 回傳整個body內容，通常是編碼過不是人能看的東西</span>
</span><span class='line'>  <span class="n">response</span><span class="o">.</span><span class="n">message</span>   <span class="c1"># 回傳HTTP狀態碼代表訊息 ex：&quot;Moved Permanently&quot; </span>
</span><span class='line'>  <span class="n">response</span><span class="o">.</span><span class="n">uri</span>       <span class="c1"># 回傳呼叫它的uri物件</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">#uri物件也是個很方便的東西裡面常見的功能有</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">uri</span><span class="o">.</span><span class="n">request_uri</span>    <span class="c1"># 回傳你的request ex: /bar/dosomething</span>
</span><span class='line'>  <span class="n">uri</span><span class="o">.</span><span class="n">host</span>           <span class="c1"># 回傳domain</span>
</span><span class='line'>  <span class="n">uri</span><span class="o">.</span><span class="n">path</span>           <span class="c1"># 同request_uri</span>
</span><span class='line'>  <span class="n">uri</span><span class="o">.</span><span class="n">scheme</span>         <span class="c1"># 回傳使用的傳輸協定</span>
</span><span class='line'>  <span class="n">uri</span><span class="o">.</span><span class="n">query</span>          <span class="c1"># 回傳querysting</span>
</span><span class='line'>  <span class="n">uri</span><span class="o">.</span><span class="n">port</span>           <span class="c1"># 回傳使用的port</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">#query_string處理</span>
</span><span class='line'>  <span class="n">params</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:limit</span> <span class="o">=&gt;</span> <span class="mi">10</span><span class="p">,</span> <span class="ss">:page</span> <span class="o">=&gt;</span> <span class="mi">3</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">uri</span><span class="o">.</span><span class="n">query</span> <span class="o">=</span> <span class="no">URI</span><span class="o">.</span><span class="n">encode_www_form</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>應用範例：預留一個版位顯示response.body的結果，利用Net::HTTP對某伺服器發送一個請求，並且把回傳的結果存入memcache以利用來顯示到預留的版位上。嗯嗯，聽起來有點像是ajax的概念，只是由伺服器端坐的而且他是同步的&hellip;</p>

<figure class='code'><figcaption><span>應用範例:Get </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>   <span class="n">response</span> <span class="o">=</span> <span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="o">.</span><span class="n">get_response</span><span class="p">(</span><span class="no">URI</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="s2">&quot;http://foobar.header.com/api&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">response</span><span class="o">.</span><span class="n">code</span><span class="o">.</span><span class="n">to_i</span> <span class="o">==</span> <span class="mi">200</span>
</span><span class='line'>      <span class="vg">$memcached</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;header-html&quot;</span><span class="p">,</span> <span class="n">response</span><span class="o">.</span><span class="n">body</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">某一處的</span><span class="no">VIEW</span><span class="err">顯現出來</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">&lt;%=</span> <span class="n">raw</span> <span class="vg">$memcached</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;header-html&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">force_encode</span><span class="p">(</span><span class="s2">&quot;utf8&quot;</span><span class="p">)</span> <span class="o">%&gt;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>post_form</h2>

<p>同理，有get方法就會有post方法，post方法一般用在傳送伺服器的的資料量大或是比較需要顧慮到安全時會用的！直接看教學範例：</p>

<figure class='code'><figcaption><span>使用範例:Post </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>   <span class="nb">require</span> <span class="s2">&quot;net/http&quot;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">uri</span> <span class="o">=</span> <span class="no">URI</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="s2">&quot;http://example.com/foo/search&quot;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">#方法一</span>
</span><span class='line'>  <span class="n">response</span> <span class="o">=</span> <span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="o">.</span><span class="n">post_form</span><span class="p">(</span><span class="n">uri</span><span class="p">,</span> <span class="p">{</span><span class="s2">&quot;data&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;My data blah blah&quot;</span><span class="p">,</span> <span class="s2">&quot;per_page&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;50&quot;</span><span class="p">})</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">#方法二</span>
</span><span class='line'>  <span class="n">http</span> <span class="o">=</span> <span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">uri</span><span class="o">.</span><span class="n">host</span><span class="p">,</span> <span class="n">uri</span><span class="o">.</span><span class="n">port</span><span class="p">)</span>
</span><span class='line'>  <span class="n">request</span> <span class="o">=</span> <span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="o">::</span><span class="no">Post</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">uri</span><span class="o">.</span><span class="n">request_uri</span><span class="p">)</span>
</span><span class='line'>  <span class="n">request</span><span class="o">.</span><span class="n">set_form_date</span><span class="p">({</span><span class="s2">&quot;data&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;My data blah blah&quot;</span><span class="p">,</span> <span class="s2">&quot;per_page&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;50&quot;</span><span class="p">})</span>
</span><span class='line'>  <span class="n">response</span> <span class="o">=</span> <span class="n">http</span><span class="o">.</span><span class="n">request</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>REST methods</h2>

<p>有寫過rails的人相信都對RESTful不陌生，所以直接看範例吧！</p>

<figure class='code'><figcaption><span>使用範例:REST </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>   <span class="nb">require</span> <span class="s2">&quot;net/http&quot;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">uri</span> <span class="o">=</span> <span class="no">URI</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="s2">&quot;http://api.noelsaga.net/&quot;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">http</span> <span class="o">=</span> <span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">uri</span><span class="o">.</span><span class="n">host</span><span class="p">,</span> <span class="n">uri</span><span class="o">.</span><span class="n">port</span><span class="p">)</span> <span class="c1">#</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">#Get : 通常是讀取單一筆資料如show</span>
</span><span class='line'>  <span class="n">response</span> <span class="o">=</span> <span class="n">http</span><span class="o">.</span><span class="n">request</span><span class="p">(</span><span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="o">::</span><span class="no">Get</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;/post/1&quot;</span><span class="p">))</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">#Post: 通常是用來建立資料</span>
</span><span class='line'>  <span class="n">request</span> <span class="o">=</span> <span class="p">(</span><span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="o">::</span><span class="no">Post</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;/post/1&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="n">request</span><span class="o">.</span><span class="n">set_form_date</span><span class="p">({</span><span class="ss">:tilte</span> <span class="o">=&gt;</span> <span class="s2">&quot;Monday&quot;</span><span class="p">,</span> <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;I&#39;m wanna go home...&quot;</span><span class="p">})</span>
</span><span class='line'>  <span class="n">response</span> <span class="o">=</span> <span class="n">http</span><span class="o">.</span><span class="n">request</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">#Put : 通常是用來更新一筆資料</span>
</span><span class='line'>  <span class="n">request</span> <span class="o">=</span> <span class="p">(</span><span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="o">::</span><span class="no">Put</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;/post/1&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="n">request</span><span class="o">.</span><span class="n">set_form_date</span><span class="p">({</span><span class="ss">:title</span> <span class="o">=&gt;</span> <span class="s2">&quot;Tuesday&quot;</span><span class="p">})</span>
</span><span class='line'>  <span class="n">response</span> <span class="o">=</span> <span class="n">http</span><span class="o">.</span><span class="n">request</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">#Delete: 嗯嗯，字面意思很清楚了</span>
</span><span class='line'>  <span class="n">request</span> <span class="o">=</span> <span class="p">(</span><span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="o">::</span><span class="no">Delete</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;/post/1&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="n">response</span> <span class="o">=</span> <span class="n">http</span><span class="o">.</span><span class="n">request</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>
</span><span class='line'>  
</span></code></pre></td></tr></table></div></figure>


<h2>SSL/HTTPS request with PEM certificate</h2>

<p>如果是需要pem認證時，可以這麼做，此處直接使用Peter Cooper提供的範例</p>

<figure class='code'><figcaption><span>使用範例:PEM certificate </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>   <span class="nb">require</span> <span class="s2">&quot;net/https&quot;</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s2">&quot;uri&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">uri</span> <span class="o">=</span> <span class="no">URI</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="s2">&quot;https://secure.com/&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">pem</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s2">&quot;/path/to/my.pem&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">http</span> <span class="o">=</span> <span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">uri</span><span class="o">.</span><span class="n">host</span><span class="p">,</span> <span class="n">uri</span><span class="o">.</span><span class="n">port</span><span class="p">)</span>
</span><span class='line'>  <span class="n">http</span><span class="o">.</span><span class="n">use_ssl</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">http</span><span class="o">.</span><span class="n">cert</span> <span class="o">=</span> <span class="no">OpenSSL</span><span class="o">::</span><span class="no">X509</span><span class="o">::</span><span class="no">Certificate</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">pem</span><span class="p">)</span>  <span class="c1"># 根據pem檔案建立認證</span>
</span><span class='line'>  <span class="n">http</span><span class="o">.</span><span class="n">key</span> <span class="o">=</span> <span class="no">OpenSSL</span><span class="o">::</span><span class="no">PKey</span><span class="o">::</span><span class="no">RSA</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">pem</span><span class="p">)</span>           <span class="c1"># 根據pem檔案建立認證</span>
</span><span class='line'>  <span class="n">http</span><span class="o">.</span><span class="n">verify_mode</span> <span class="o">=</span> <span class="no">OpenSSL</span><span class="o">::</span><span class="no">SSL</span><span class="o">::</span><span class="no">VERIFY_PEER</span>
</span><span class='line'>  <span class="n">request</span> <span class="o">=</span> <span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="o">::</span><span class="no">Get</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">uri</span><span class="o">.</span><span class="n">request_uri</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Post傳檔部分 （從缺中）</h2>

<p><a href="http://www.rubyinside.com/nethttp-cheat-sheet-2940.html">參考Peter Cooper文章</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cookies練習，使用javascript]]></title>
    <link href="http://noelsaga.herokuapp.com/blog/2014/07/09/javascript-cookies/"/>
    <updated>2014-07-09T15:34:51+08:00</updated>
    <id>http://noelsaga.herokuapp.com/blog/2014/07/09/javascript-cookies</id>
    <content type="html"><![CDATA[<h2>目的：</h2>

<p>w3schools開宗明義的介紹，cookie是被發明來解決<strong><em>『如何讓伺服器記住使用者的資訊』</em></strong>。因為當伺服器端回傳了一個response給使用者端時，伺服器就會忘記一切關於使用者的資料，而cookie如何實作到這點呢？其實就只是把資料存在使用者端（瀏覽器），例如使用者來到該網站輸入了些基本資料，而我們可以將這些資料存入cookie裡，下次該使用者在拜訪網頁時，我們就可以自動去cookie找尋之前的資料並且顯示出來，延伸應用包含使用者登入、記住使用者喜好資訊、購物車實作等等都是常見的cookie應用。而現今cookie也時常與session搭配做進一步的應用。</p>

<!-- more -->


<h2>簡單介紹：</h2>

<p>一般cookie特性如：</p>

<ul>
<li>一個cookie的大小最多為4KB</li>
<li>一個網站能夠存取20個cookie</li>
<li>瀏覽器最多可記住300個cookie，</li>
<li>內容是key=value的形式，其中value只能是字串，如果想存入array或hash得多花些技巧</li>
<li>可設定expires時間來決定cookie的存活時間</li>
<li>若使用者關閉瀏覽器但cookie仍未失效，則會寫入<code>cookies.txt</code>裡</li>
</ul>


<h3>以http的角度來看cookie的運作方式</h3>

<p>當client發出一個request給server時，該request的header裡會夾帶一些訊息，其中就包含<code>Cookie</code>，而server可借此取得該client端所儲存的cookie並使用；同理，當server端回response給client時，也會在header裡加上<code>Set-Cookie</code>的內容，藉此把想儲存的資料(如：使用者個人行為、使用偏好等資料)，存在client端裡，等待當下次該client端又向server端發出request時，便可檢查<code>Cookie</code>的內容來取得資料，來達成所謂<strong><em>讓伺服器記住使用者的資訊</em></strong>的目的。</p>

<p>而一般來說cookie是server所設定且關心的，但實際上我們也可以在client端使用js來操作cookie、做即時性的操作，而不需要與server溝通，大大減少了server的工作，也增加了使用上的彈性與便利。以下就來介紹簡單的js對cookie操作：</p>

<h3>範例</h3>

<figure class='code'><figcaption><span>範例：js存入cookie </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>   <span class="nx">now</span><span class="o">=</span><span class="k">new</span> <span class="nb">Date</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">now</span><span class="p">.</span><span class="nx">setTime</span><span class="p">(</span> <span class="nx">now</span><span class="p">.</span><span class="nx">getTime</span><span class="p">(</span> <span class="p">)</span> <span class="o">+</span> <span class="mi">1000</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">5</span> <span class="p">)</span>
</span><span class='line'>  <span class="nb">document</span><span class="p">.</span><span class="nx">cookie</span> <span class="o">=</span> <span class="s2">&quot;foo=bar;expires=&quot;</span> <span class="o">+</span> <span class="nx">now</span><span class="p">.</span><span class="nx">toGMTString</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>更進一步把它寫成個可以重複使用的function吧</p>

<figure class='code'><figcaption><span>範例: 存取cookie函式 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>   <span class="nx">expires_at</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">expires_at</span><span class="p">.</span><span class="nx">setTime</span><span class="p">(</span><span class="nx">expires_at</span><span class="p">.</span><span class="nx">getTime</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1000</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">document</span><span class="p">.</span><span class="nx">cookie</span> <span class="o">=</span> <span class="s2">&quot;foo=bar;expires=&quot;</span> <span class="o">+</span> <span class="nx">expires_at</span>
</span></code></pre></td></tr></table></div></figure>


<p>刪除cookie則把expires設得比現在的時間還早即可，就會失效了。</p>

<figure class='code'><figcaption><span>範例: js移除cookie </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>   <span class="nx">expires_at</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">expires_at</span><span class="p">.</span><span class="nx">setTime</span><span class="p">(</span><span class="nx">expires_at</span><span class="p">.</span><span class="nx">getTime</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1000</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">document</span><span class="p">.</span><span class="nx">cooki</span>   <span class="nx">e</span> <span class="o">=</span> <span class="s2">&quot;foo=bar;expires=&quot;</span> <span class="o">+</span> <span class="nx">expires_at</span>
</span></code></pre></td></tr></table></div></figure>


<p>讀取特定cookie，對js來說似乎沒有什麼特定方式，所以只好自己寫個function來取，連同剛剛提到的都一起寫成function吧</p>

<figure class='code'><figcaption><span>範例: js操作特定cookie </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">set_cookie</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">value</span><span class="p">,</span> <span class="nx">expires_at</span><span class="p">,</span> <span class="nx">path</span><span class="p">,</span> <span class="nx">domain</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">date</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">path</span> <span class="o">=</span> <span class="k">typeof</span> <span class="nx">path</span> <span class="o">!==</span> <span class="s1">&#39;undefined&#39;</span> <span class="o">?</span> <span class="nx">path</span> <span class="o">:</span> <span class="s1">&#39;/&#39;</span>
</span><span class='line'>  <span class="nx">domain</span> <span class="o">=</span> <span class="k">typeof</span> <span class="nx">domain</span> <span class="o">!==</span> <span class="s1">&#39;undefined&#39;</span> <span class="o">?</span> <span class="nx">domain</span> <span class="o">:</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">host</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">expires_at</span> <span class="o">===</span> <span class="s1">&#39;undefined&#39;</span><span class="p">){</span>
</span><span class='line'>    <span class="c1">// 預設一小時到期</span>
</span><span class='line'>    <span class="nx">date</span><span class="p">.</span><span class="nx">setTime</span><span class="p">(</span><span class="nx">date</span><span class="p">.</span><span class="nx">getTime</span><span class="p">()</span> <span class="o">+</span> <span class="mi">24</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">expires_at</span> <span class="o">=</span> <span class="nx">date</span><span class="p">.</span><span class="nx">toGMTString</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span><span class="p">{</span>
</span><span class='line'>    <span class="nx">date</span><span class="p">.</span><span class="nx">setTime</span><span class="p">(</span><span class="nx">date</span><span class="p">.</span><span class="nx">getTime</span><span class="p">()</span> <span class="o">+</span> <span class="nx">expires_at</span> <span class="o">*</span> <span class="mi">24</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">expires_at</span> <span class="o">=</span> <span class="nx">date</span><span class="p">.</span><span class="nx">toGMTString</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">cookie</span> <span class="o">=</span> <span class="nx">name</span> <span class="o">+</span> <span class="s1">&#39;=&#39;</span> <span class="o">+</span> <span class="nx">escape</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;;expires=&#39;</span> <span class="o">+</span> <span class="nx">expires_at</span> <span class="o">+</span>  <span class="s1">&#39;;path=&#39;</span> <span class="o">+</span> <span class="nx">path</span> <span class="o">+</span> <span class="s1">&#39;;domain=&#39;</span> <span class="o">+</span> <span class="nx">domain</span>
</span><span class='line'>  <span class="nb">document</span><span class="p">.</span><span class="nx">cookie</span> <span class="o">=</span> <span class="nx">cookie</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">delete_cookie</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">set_cookie</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">get_cookie</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">result</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">cookie</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">cookie</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">cookie</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">index</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">start</span> <span class="o">=</span> <span class="nx">index</span> <span class="o">+</span> <span class="nx">name</span><span class="p">.</span><span class="nx">length</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">end</span> <span class="o">=</span> <span class="nx">cookie</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;;&#39;</span><span class="p">,</span><span class="nx">start</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">end</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">result</span> <span class="o">=</span> <span class="nx">cookie</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="nx">start</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">result</span> <span class="o">=</span> <span class="nx">cookie</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="nx">start</span><span class="p">,</span> <span class="nx">end</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">result</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>安全性</h2>

<p>既然cookie是存在瀏覽器，那是否有被使用者看到、更改，或是其他第三方更改或攔截的可能呢？答案當然是有，而且許多常見的駭客行為也正好會從cookie下手。而且許多網站以session-cookie來實作會員登入機制，而session_id時常存在cookie裡，因此也增加會員帳號被盜取的可能性(如：<a href="http://devco.re/blog/2015/01/30/cookie-security-insight-acer">宏碁雲端售票</a>)
因此，我們盡量保持些良好的習慣與警覺性，可以降低cookie被串改或盜用的可能性</p>

<ul>
<li>應該避免把敏感性資料存在cookie裡</li>
<li>若真有敏感性資料存在cookie裡需加密</li>
<li>對cookie設定<code>Secure Flag</code>（Https）</li>
<li>cookie設定<code>Http Only Flag</code>（js無法取得Cookie）</li>
</ul>


<p>遵守以上幾點，應能把cookie帶來的風險降到最小</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First-article]]></title>
    <link href="http://noelsaga.herokuapp.com/blog/2014/07/03/first-article/"/>
    <updated>2014-07-03T12:36:53+08:00</updated>
    <id>http://noelsaga.herokuapp.com/blog/2014/07/03/first-article</id>
    <content type="html"><![CDATA[<h1>My First Article using Octopress</h1>

<hr />

<p><del><strong><em>星期四猴子去考試</em></strong></del></p>

<p>第一次使用octopress架blog並且搭配佈署到heroku，參考<a href="http://blog.eddie.com.tw/2011/10/11/how-to-install-octopress-on-heroku/">高見龍大大</a>的教學，其實架起來比想像的快很多，但是目前還是要習慣octopress的使用方式，跟搞熟heroku到底適不適合開分支合併回到master去，這樣版本控制才可以發揮他的作用阿，如果改錯了什麼，heroku起不來我辛苦寫的文章不就&hellip;！？</p>

<p>  接下來希望要來玩玩怎麼把theme改成我理想的樣子，雖然我css根本爛的可以，但是還是有東西可以給我練練了。還要試著把我本來在hackpad的文章一一搬過來，並且希望我可以持續乖乖的寫好blog&hellip;。嗯嗯，要做跟學習的事還是好多好多，但是過程是真的很有趣的，加油吧。</p>

<!-- more -->


<p>接下來下面讓我來試試markdown的特點吧。</p>

<h3><code>怡婷老師生日大快樂～！</code></h3>

<p><img src="../images/o0640064012326561387.jpg" alt="pic" /></p>

<p><img src="http://blenderartists.org/forum/attachment.php?attachmentid=212851&amp;stc=1&amp;d=1358710824g%20=250" alt="image" /></p>

<p><img class="right" src="http://noelsaga.herokuapp.com/images/o0640064012326561387.jpg" width="350" height="350" title="image" alt="images"></p>

<figure class='code'><figcaption><span>Time to be Awesome - awesome.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Awesome!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>puts "Hello World!"
echo "Hello World";
console.log("Hello World");
printf("Hello World");
cout&lt;&lt;"Hello World";
System.out.println("Hello World");
&lt;p&gt;Hello World&lt;/p&gt;          
</code></pre>

<ul>
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
</ul>


<figure class='code'><figcaption><span>當年第一次寫php，現在看不知道在寫啥鬼 start:5 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'>  <span class="k">public</span> <span class="nv">$date</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">//public $startDay; </span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(){</span>
</span><span class='line'>      <span class="k">parent</span><span class="o">::</span><span class="na">__construct</span><span class="p">();</span>
</span><span class='line'>      <span class="nb">date_default_timezone_set</span><span class="p">(</span><span class="s1">&#39;Asia/Chongqing&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">date</span> <span class="o">=</span> <span class="nb">date</span><span class="p">(</span><span class="s1">&#39;Y-m-d&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">echo</span> <span class="s2">&quot;HAHA!!!&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="c1">//$this-&gt;startDay =</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">//$dateOffset=0，0就是今天，1是明天，-1是昨天類推</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">getDateOffSet</span><span class="p">(</span><span class="nv">$dateOffset</span> <span class="o">=</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>      <span class="nv">$endDate</span> <span class="o">=</span> <span class="nb">date</span><span class="p">(</span><span class="s1">&#39;Y-m-d&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nv">$dateOffset</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>          <span class="nv">$nDay</span> <span class="o">=</span> <span class="nv">$dateOffset</span><span class="p">;</span>
</span><span class='line'>          <span class="nv">$unixDate</span> <span class="o">=</span> <span class="nb">strtotime</span><span class="p">(</span><span class="nv">$endDate</span><span class="p">);</span>
</span><span class='line'>          <span class="nv">$strStartDate</span> <span class="o">=</span> <span class="nv">$nDay</span><span class="o">.</span><span class="s1">&#39; days&#39;</span><span class="p">;</span>
</span><span class='line'>          <span class="nv">$endDate</span> <span class="o">=</span> <span class="nb">date</span><span class="p">(</span><span class="s1">&#39;Y-m-d&#39;</span><span class="p">,</span> <span class="nb">strtotime</span><span class="p">(</span><span class="nv">$strStartDate</span><span class="p">,</span> <span class="nv">$unixDate</span><span class="p">));</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$endDate</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">//$startDate是從$endDate為起始點算的，一般來說必為負數，-5就是$endDate的5天前。參數$endDate格式為&#39;Y-m-d&#39;，目前必須先從getDateOffSet()取得</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">getStartDate</span><span class="p">(</span><span class="nv">$startDate</span><span class="p">,</span> <span class="nv">$endDate</span><span class="p">){</span>
</span><span class='line'>      <span class="c1">//$endDate=$this-&gt;getDateOffSet($dateOffset);   </span>
</span><span class='line'>      <span class="nv">$unixDate</span> <span class="o">=</span> <span class="nb">strtotime</span><span class="p">(</span><span class="nv">$endDate</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$strStartDate</span> <span class="o">=</span> <span class="nv">$startDate</span><span class="o">.</span><span class="s1">&#39; days&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$startDate</span> <span class="o">=</span> <span class="nb">date</span><span class="p">(</span><span class="s1">&#39;Y-m-d&#39;</span><span class="p">,</span> <span class="nb">strtotime</span><span class="p">(</span><span class="nv">$strStartDate</span><span class="p">,</span> <span class="nv">$unixDate</span><span class="p">));</span>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$startDate</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">//一次取得$endDate,$startDate，回傳的是一個陣列</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">getStartToEndDates</span><span class="p">(</span><span class="nv">$startDate</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nv">$dateOffset</span> <span class="o">=</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>      <span class="nv">$endDate</span> <span class="o">=</span> <span class="nb">date</span><span class="p">(</span><span class="s1">&#39;Y-m-d&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nv">$dateOffset</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>          <span class="nv">$nDay</span> <span class="o">=</span> <span class="nv">$dateOffset</span><span class="p">;</span>
</span><span class='line'>          <span class="nv">$unixDate</span> <span class="o">=</span> <span class="nb">strtotime</span><span class="p">(</span><span class="nv">$endDate</span><span class="p">);</span>
</span><span class='line'>          <span class="nv">$strStartDate</span> <span class="o">=</span> <span class="nv">$nDay</span><span class="o">.</span><span class="s1">&#39; days&#39;</span><span class="p">;</span>
</span><span class='line'>          <span class="nv">$endDate</span> <span class="o">=</span> <span class="nb">date</span><span class="p">(</span><span class="s1">&#39;Y-m-d&#39;</span><span class="p">,</span> <span class="nb">strtotime</span><span class="p">(</span><span class="nv">$strStartDate</span><span class="p">,</span> <span class="nv">$unixDate</span><span class="p">));</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nv">$unixDate</span> <span class="o">=</span> <span class="nb">strtotime</span><span class="p">(</span><span class="nv">$endDate</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$strStartDate</span> <span class="o">=</span> <span class="nv">$startDate</span><span class="o">.</span><span class="s1">&#39; days&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$startDate</span> <span class="o">=</span> <span class="nb">date</span><span class="p">(</span><span class="s1">&#39;Y-m-d&#39;</span><span class="p">,</span> <span class="nb">strtotime</span><span class="p">(</span><span class="nv">$strStartDate</span><span class="p">,</span> <span class="nv">$unixDate</span><span class="p">));</span>
</span><span class='line'>      <span class="nv">$dates</span><span class="p">[</span><span class="s1">&#39;endDate&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$endDate</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$dates</span><span class="p">[</span><span class="s1">&#39;startDate&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$startDate</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$dates</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>modeltest  (modeltest.php)</span> <a href='http://noelsaga.herokuapp.com/downloads/code/php/modeltest.php'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Modeltest</span> <span class="k">extends</span> <span class="nx">CI_Model</span><span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">public</span> <span class="nv">$date</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">//public $startDay;</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(){</span>
</span><span class='line'>      <span class="k">parent</span><span class="o">::</span><span class="na">__construct</span><span class="p">();</span>
</span><span class='line'>      <span class="nb">date_default_timezone_set</span><span class="p">(</span><span class="s1">&#39;Asia/Chongqing&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">date</span> <span class="o">=</span> <span class="nb">date</span><span class="p">(</span><span class="s1">&#39;Y-m-d&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">echo</span> <span class="s2">&quot;HAHA!!!&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="c1">//$this-&gt;startDay =</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">//$dateOffset=0，0就是今天，1是明天，-1是昨天類推</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">getDateOffSet</span><span class="p">(</span><span class="nv">$dateOffset</span> <span class="o">=</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>      <span class="nv">$endDate</span> <span class="o">=</span> <span class="nb">date</span><span class="p">(</span><span class="s1">&#39;Y-m-d&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nv">$dateOffset</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>          <span class="nv">$nDay</span> <span class="o">=</span> <span class="nv">$dateOffset</span><span class="p">;</span>
</span><span class='line'>          <span class="nv">$unixDate</span> <span class="o">=</span> <span class="nb">strtotime</span><span class="p">(</span><span class="nv">$endDate</span><span class="p">);</span>
</span><span class='line'>          <span class="nv">$strStartDate</span> <span class="o">=</span> <span class="nv">$nDay</span><span class="o">.</span><span class="s1">&#39; days&#39;</span><span class="p">;</span>
</span><span class='line'>          <span class="nv">$endDate</span> <span class="o">=</span> <span class="nb">date</span><span class="p">(</span><span class="s1">&#39;Y-m-d&#39;</span><span class="p">,</span> <span class="nb">strtotime</span><span class="p">(</span><span class="nv">$strStartDate</span><span class="p">,</span> <span class="nv">$unixDate</span><span class="p">));</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$endDate</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">//$startDate是從$endDate為起始點算的，一般來說必為負數，-5就是$endDate的5天前。參數$endDate格式為&#39;Y-m-d&#39;，目前必須先從getDateOffSet()取得</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">getStartDate</span><span class="p">(</span><span class="nv">$startDate</span><span class="p">,</span> <span class="nv">$endDate</span><span class="p">){</span>
</span><span class='line'>      <span class="c1">//$endDate=$this-&gt;getDateOffSet($dateOffset);   </span>
</span><span class='line'>      <span class="nv">$unixDate</span> <span class="o">=</span> <span class="nb">strtotime</span><span class="p">(</span><span class="nv">$endDate</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$strStartDate</span> <span class="o">=</span> <span class="nv">$startDate</span><span class="o">.</span><span class="s1">&#39; days&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$startDate</span> <span class="o">=</span> <span class="nb">date</span><span class="p">(</span><span class="s1">&#39;Y-m-d&#39;</span><span class="p">,</span> <span class="nb">strtotime</span><span class="p">(</span><span class="nv">$strStartDate</span><span class="p">,</span> <span class="nv">$unixDate</span><span class="p">));</span>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$startDate</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">//一次取得$endDate,$startDate，回傳的是一個陣列</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">getStartToEndDates</span><span class="p">(</span><span class="nv">$startDate</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nv">$dateOffset</span> <span class="o">=</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>      <span class="nv">$endDate</span> <span class="o">=</span> <span class="nb">date</span><span class="p">(</span><span class="s1">&#39;Y-m-d&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nv">$dateOffset</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>          <span class="nv">$nDay</span> <span class="o">=</span> <span class="nv">$dateOffset</span><span class="p">;</span>
</span><span class='line'>          <span class="nv">$unixDate</span> <span class="o">=</span> <span class="nb">strtotime</span><span class="p">(</span><span class="nv">$endDate</span><span class="p">);</span>
</span><span class='line'>          <span class="nv">$strStartDate</span> <span class="o">=</span> <span class="nv">$nDay</span><span class="o">.</span><span class="s1">&#39; days&#39;</span><span class="p">;</span>
</span><span class='line'>          <span class="nv">$endDate</span> <span class="o">=</span> <span class="nb">date</span><span class="p">(</span><span class="s1">&#39;Y-m-d&#39;</span><span class="p">,</span> <span class="nb">strtotime</span><span class="p">(</span><span class="nv">$strStartDate</span><span class="p">,</span> <span class="nv">$unixDate</span><span class="p">));</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nv">$unixDate</span> <span class="o">=</span> <span class="nb">strtotime</span><span class="p">(</span><span class="nv">$endDate</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$strStartDate</span> <span class="o">=</span> <span class="nv">$startDate</span><span class="o">.</span><span class="s1">&#39; days&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$startDate</span> <span class="o">=</span> <span class="nb">date</span><span class="p">(</span><span class="s1">&#39;Y-m-d&#39;</span><span class="p">,</span> <span class="nb">strtotime</span><span class="p">(</span><span class="nv">$strStartDate</span><span class="p">,</span> <span class="nv">$unixDate</span><span class="p">));</span>
</span><span class='line'>      <span class="nv">$dates</span><span class="p">[</span><span class="s1">&#39;endDate&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$endDate</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$dates</span><span class="p">[</span><span class="s1">&#39;startDate&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$startDate</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$dates</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">getFeaturedNewsArticles</span><span class="p">(</span><span class="nv">$list_num</span><span class="p">,</span> <span class="nv">$startDate</span> <span class="o">=</span> <span class="o">-</span><span class="mi">7</span><span class="p">,</span> <span class="nv">$dateOffset</span><span class="o">=</span><span class="mi">0</span><span class="p">){</span><span class="c1">//撈一週精選美妝新聞</span>
</span><span class='line'>      <span class="nv">$endDate</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getDateOffSet</span><span class="p">(</span><span class="nv">$dateOffset</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$startDate</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getStartDate</span><span class="p">(</span><span class="nv">$startDate</span><span class="p">,</span> <span class="nv">$endDate</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">//test area start  想拔掉測試hide起來就好 下面參數也就不用改了</span>
</span><span class='line'>      <span class="nv">$endDate</span><span class="o">=</span><span class="s1">&#39;2012-05-06&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$startDate</span><span class="o">=</span><span class="s1">&#39;2012-04-06&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="c1">//test area stop</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">from</span><span class="p">(</span><span class="s1">&#39;cosme_beautynews&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">join</span><span class="p">(</span><span class="s1">&#39;cosme_beautynews_paragraphs&#39;</span><span class="p">,</span> <span class="s1">&#39;cosme_beautynews.news_id=cosme_beautynews_paragraphs.news_id&#39;</span><span class="p">,</span> <span class="s1">&#39;left&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">where</span><span class="p">(</span><span class="s1">&#39;news_publishdate &gt;&#39;</span><span class="p">,</span> <span class="nv">$startDate</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">where</span><span class="p">(</span><span class="s1">&#39;news_publishdate &lt;&#39;</span><span class="p">,</span> <span class="nv">$endDate</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">limit</span><span class="p">(</span><span class="nv">$list_num</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">order_by</span><span class="p">(</span><span class="s2">&quot;news_pageview&quot;</span><span class="p">,</span> <span class="s2">&quot;desc&quot;</span><span class="p">);</span> <span class="c1">//照新聞人氣排名</span>
</span><span class='line'>      <span class="nv">$query</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">();</span>
</span><span class='line'>      <span class="nv">$data</span> <span class="o">=</span> <span class="nv">$query</span><span class="o">-&gt;</span><span class="na">result_array</span><span class="p">();</span>
</span><span class='line'>      <span class="nv">$return_data</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>      <span class="nv">$return_data</span><span class="p">[</span><span class="s1">&#39;news_data&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$data</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$return_data</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">getRecommendReviews</span><span class="p">(</span><span class="nv">$list_Num</span><span class="p">,</span> <span class="nv">$nday</span><span class="p">){</span><span class="c1">//撈每日最新推薦資料，合併cosme_product</span>
</span><span class='line'>      <span class="nv">$crv_seq</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getRandomReviewsData</span><span class="p">();</span>
</span><span class='line'>      <span class="nv">$strDay</span> <span class="o">=</span> <span class="nv">$nday</span><span class="o">.</span><span class="s1">&#39; day&#39;</span><span class="p">;</span>        
</span><span class='line'>      <span class="nv">$startDate</span> <span class="o">=</span> <span class="nb">date</span><span class="p">(</span><span class="s2">&quot;Y-m-d&quot;</span><span class="p">,</span> <span class="nb">strtotime</span><span class="p">(</span><span class="nv">$strDay</span><span class="p">));</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">from</span><span class="p">(</span><span class="s1">&#39;cosme_review&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">join</span><span class="p">(</span><span class="s1">&#39;cosme_product&#39;</span><span class="p">,</span> <span class="s1">&#39;cosme_review.crv_pseq=cosme_product.product_id&#39;</span><span class="p">,</span> <span class="s1">&#39;left&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">foreach</span> <span class="p">(</span><span class="nv">$crv_seq</span> <span class="k">as</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">or_where</span><span class="p">(</span><span class="s1">&#39;crv_seq&#39;</span><span class="p">,</span> <span class="nv">$value</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">limit</span><span class="p">(</span><span class="nv">$list_Num</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$query</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">();</span>
</span><span class='line'>      <span class="nv">$data</span> <span class="o">=</span> <span class="nv">$query</span><span class="o">-&gt;</span><span class="na">result_array</span><span class="p">();</span>
</span><span class='line'>      <span class="nv">$return_data</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>      <span class="nv">$return_data</span><span class="p">[</span><span class="s1">&#39;reviewData&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$data</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$return_data</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">getPollTop</span><span class="p">(</span><span class="nv">$topNumber</span><span class="p">,</span> <span class="nv">$startDate</span><span class="p">,</span> <span class="nv">$dateOffset</span><span class="p">){</span> <span class="c1">//抓人氣最高的產品心得,時間參數部份已補上，參數部份統一用DAYS去算</span>
</span><span class='line'>      <span class="nv">$endDate</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getDateOffSet</span><span class="p">(</span><span class="nv">$dateOffset</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">//test area start</span>
</span><span class='line'>      <span class="nv">$endDate</span> <span class="o">=</span> <span class="s1">&#39;2012-05-06&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="c1">//test area end</span>
</span><span class='line'>      <span class="nv">$unixDate</span> <span class="o">=</span> <span class="nb">strtotime</span><span class="p">(</span><span class="nv">$endDate</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$startDate</span> <span class="o">=</span> <span class="nb">date</span><span class="p">(</span><span class="s1">&#39;Y-m-d&#39;</span><span class="p">,</span> <span class="nb">strtotime</span><span class="p">(</span><span class="s2">&quot;- 2 months&quot;</span><span class="p">,</span> <span class="nv">$unixDate</span><span class="p">));</span>
</span><span class='line'>      <span class="nv">$dates</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getStartToEndDates</span><span class="p">(</span><span class="nv">$startDate</span><span class="p">,</span> <span class="nv">$dateOffset</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$endDate</span> <span class="o">=</span> <span class="nv">$dates</span><span class="p">[</span><span class="s1">&#39;endDate&#39;</span><span class="p">];</span>
</span><span class='line'>      <span class="nv">$startDate</span> <span class="o">=</span> <span class="nv">$dates</span><span class="p">[</span><span class="s1">&#39;startDate&#39;</span><span class="p">];</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">from</span><span class="p">(</span><span class="s1">&#39;cosme_review_poll&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">select</span><span class="p">(</span><span class="s1">&#39;crv_seq,count(*)&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">group_by</span><span class="p">(</span><span class="s1">&#39;crv_seq&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">where</span><span class="p">(</span><span class="s1">&#39;createtime &gt;&#39;</span><span class="p">,</span> <span class="nv">$startDate</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">where</span><span class="p">(</span><span class="s1">&#39;createtime &lt;&#39;</span><span class="p">,</span> <span class="nv">$endDate</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">limit</span><span class="p">(</span><span class="nv">$topNumber</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">order_by</span><span class="p">(</span><span class="s1">&#39;count(*)&#39;</span><span class="p">,</span> <span class="s1">&#39;desc&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$query</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">();</span>
</span><span class='line'>      <span class="nv">$data</span> <span class="o">=</span> <span class="nv">$query</span><span class="o">-&gt;</span><span class="na">result_array</span><span class="p">();</span>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$data</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">getRandomReviewsData</span><span class="p">(</span><span class="nv">$poll_Num</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="nv">$rand_Num</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="nv">$startDate</span><span class="o">=-</span><span class="mi">30</span><span class="p">,</span> <span class="nv">$dateOffset</span><span class="o">=</span><span class="mi">0</span><span class="p">){</span><span class="c1">//從人氣最高的心得做20取4併只回傳crv_id</span>
</span><span class='line'>      <span class="nv">$finalData</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>      <span class="nv">$crv_seq</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>      <span class="nv">$firstdata</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getPollTop</span><span class="p">(</span><span class="nv">$poll_Num</span><span class="p">,</span> <span class="nv">$startDate</span><span class="p">,</span> <span class="nv">$dateOffset</span><span class="p">);</span><span class="c1">//隨機取20筆人氣指數最高的資料</span>
</span><span class='line'>      <span class="nv">$seconddata</span> <span class="o">=</span> <span class="nb">array_rand</span><span class="p">(</span><span class="nv">$firstdata</span><span class="p">,</span> <span class="nv">$rand_Num</span><span class="p">);</span><span class="c1">//20筆中再取4,但是好像無法只取一個值了，因為第二個參數被設定好，似乎是強迫要大於1</span>
</span><span class='line'>      <span class="k">foreach</span> <span class="p">(</span><span class="nv">$seconddata</span> <span class="k">as</span> <span class="nv">$keyValue</span><span class="p">)</span> <span class="p">{</span>              <span class="c1">//4筆資料的陣列</span>
</span><span class='line'>          <span class="nv">$finalData</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$firstdata</span><span class="p">[</span><span class="nv">$keyValue</span><span class="p">];</span>   
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">foreach</span> <span class="p">(</span><span class="nv">$finalData</span> <span class="k">as</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nv">$crv_seq</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$value</span><span class="p">[</span><span class="s1">&#39;crv_seq&#39;</span><span class="p">];</span>  <span class="c1">//再把陣列中的心得編號取出</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$crv_seq</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">getProductsIdByReviewsId</span><span class="p">(){</span>
</span><span class='line'>      <span class="nv">$crv_seq</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getRandomReviewsData</span><span class="p">();</span>   
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">from</span><span class="p">(</span><span class="s1">&#39;cosme_review&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">select</span><span class="p">(</span><span class="s1">&#39;crv_seq, crv_pseq&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">foreach</span> <span class="p">(</span><span class="nv">$crv_seq</span> <span class="k">as</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">or_where</span><span class="p">(</span><span class="s1">&#39;crv_seq&#39;</span><span class="p">,</span> <span class="nv">$value</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>    
</span><span class='line'>      <span class="nv">$query</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">();</span>
</span><span class='line'>      <span class="nv">$data</span> <span class="o">=</span> <span class="nv">$query</span><span class="o">-&gt;</span><span class="na">result_array</span><span class="p">();</span>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$data</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">getProductsSpecial</span><span class="p">(</span><span class="nv">$year</span><span class="p">,</span> <span class="nv">$month</span><span class="p">,</span> <span class="nv">$isOdd</span><span class="o">=</span><span class="k">true</span><span class="p">){</span><span class="c1">//撈新品搶先王所需資料，合併資料表cosme_review,cosme_product</span>
</span><span class='line'>      <span class="nv">$product_id</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getProductsTopId</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="nv">$year</span><span class="p">,</span> <span class="nv">$month</span><span class="p">,</span> <span class="nv">$isOdd</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">from</span><span class="p">(</span><span class="s1">&#39;cosme_product&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">join</span><span class="p">(</span><span class="s1">&#39;cosme_review&#39;</span><span class="p">,</span> <span class="s1">&#39;cosme_product.first_review_id = cosme_review.crv_seq&#39;</span><span class="p">,</span> <span class="s1">&#39;left&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">foreach</span> <span class="p">(</span><span class="nv">$product_id</span> <span class="k">as</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">or_where</span><span class="p">(</span><span class="s1">&#39;cosme_product.product_id&#39;</span><span class="p">,</span> <span class="nv">$value</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nv">$query</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">();</span>
</span><span class='line'>      <span class="nv">$data</span> <span class="o">=</span> <span class="nv">$query</span><span class="o">-&gt;</span><span class="na">result_array</span><span class="p">();</span>
</span><span class='line'>      <span class="nv">$returnData</span><span class="p">[</span><span class="s1">&#39;reviewData&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$data</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$returnData</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">getProductsTop</span><span class="p">(</span><span class="nv">$year</span><span class="p">,</span> <span class="nv">$month</span><span class="p">,</span> <span class="nv">$isOdd</span> <span class="o">=</span> <span class="k">true</span><span class="p">){</span><span class="c1">//按照邏輯撈當月份新產品60筆，邏輯在這資料表已經先處理過了，$isOdd是判斷奇數，是的話回傳當月首日</span>
</span><span class='line'>      <span class="c1">// $date=date(&#39;Y-m-d&#39;);</span>
</span><span class='line'>      <span class="c1">// $dateq=strtotime($date);</span>
</span><span class='line'>      <span class="c1">// $startDate=date(&#39;Y-m-d&#39;,strtotime(&quot;- 3 months&quot;,$dateq));</span>
</span><span class='line'>      <span class="nv">$date</span> <span class="o">=</span> <span class="p">(</span><span class="nv">$isOdd</span> <span class="o">==</span> <span class="k">true</span><span class="p">)</span> <span class="o">?</span> <span class="s1">&#39;01&#39;</span> <span class="o">:</span> <span class="s1">&#39;16&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$pickup_yearmonth</span> <span class="o">=</span> <span class="nv">$year</span><span class="o">.</span><span class="nv">$month</span><span class="o">.</span><span class="nv">$date</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">from</span><span class="p">(</span><span class="s1">&#39;cosme_newproduct_userank_product_pickup&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">where</span><span class="p">(</span><span class="s1">&#39;pickup_yearmonth&#39;</span><span class="p">,</span> <span class="nv">$pickup_yearmonth</span><span class="p">);</span>   
</span><span class='line'>      <span class="nv">$query</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">();</span>
</span><span class='line'>      <span class="nv">$return_data</span> <span class="o">=</span> <span class="nv">$query</span><span class="o">-&gt;</span><span class="na">result_array</span><span class="p">();</span>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$return_data</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">getProductsTopId</span><span class="p">(</span><span class="nv">$rand_num</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span> <span class="nv">$year</span><span class="p">,</span> <span class="nv">$month</span><span class="p">,</span> <span class="nv">$isOdd</span><span class="p">){</span><span class="c1">//隨機取出5筆，然後只回傳product_id</span>
</span><span class='line'>      <span class="nv">$thirdData</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>      <span class="nv">$findalData</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>      <span class="nv">$firstData</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getProductsTop</span><span class="p">(</span><span class="nv">$year</span><span class="p">,</span> <span class="nv">$month</span><span class="p">,</span> <span class="nv">$isOdd</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$secondData</span> <span class="o">=</span> <span class="nb">array_rand</span><span class="p">(</span><span class="nv">$firstData</span><span class="p">,</span> <span class="nv">$rand_num</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">//TODO check foreach data</span>
</span><span class='line'>      <span class="k">foreach</span> <span class="p">(</span><span class="nv">$secondData</span> <span class="k">as</span> <span class="nv">$keyValue</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nv">$thirdData</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$firstData</span><span class="p">[</span><span class="nv">$keyValue</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">foreach</span> <span class="p">(</span><span class="nv">$thirdData</span> <span class="k">as</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nv">$findalData</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$value</span><span class="p">[</span><span class="s1">&#39;product_id&#39;</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$findalData</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">//熱門注目使用心得</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">getHotReview</span><span class="p">(){</span>
</span><span class='line'>      <span class="nv">$hotReviewId</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getHotReviewId</span><span class="p">();</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">from</span><span class="p">(</span><span class="s1">&#39;cosme_review&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">join</span><span class="p">(</span><span class="s1">&#39;cosme_members&#39;</span><span class="p">,</span> <span class="s1">&#39;cosme_review.crv_memid=cosme_members.cmem_seq&#39;</span><span class="p">,</span> <span class="s1">&#39;left&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">where</span><span class="p">(</span><span class="s1">&#39;crv_seq&#39;</span><span class="p">,</span> <span class="nv">$hotReviewId</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$query</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">();</span>
</span><span class='line'>      <span class="nv">$Data</span> <span class="o">=</span> <span class="nv">$query</span><span class="o">-&gt;</span><span class="na">row_array</span><span class="p">();</span><span class="c1">//單筆資料用的陣列</span>
</span><span class='line'>      <span class="nv">$returnData</span><span class="p">[</span><span class="s1">&#39;hotReviewData&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$Data</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$returnData</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">//TODO check this logic</span>
</span><span class='line'>  <span class="c1">//排序得地方好像是錯的，要的是一段時間內的PV而非最終的</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">getTopReview</span><span class="p">(</span><span class="nv">$startDate</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nv">$dateOffset</span> <span class="o">=</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>      <span class="nv">$endDate</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getDateOffSet</span><span class="p">(</span><span class="nv">$dateOffset</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$startDate</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getStartDate</span><span class="p">(</span><span class="nv">$startDate</span><span class="p">,</span> <span class="nv">$endDate</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">//test area start</span>
</span><span class='line'>      <span class="nv">$startDate</span> <span class="o">=</span> <span class="s1">&#39;2012-05-01&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$endDate</span> <span class="o">=</span> <span class="s1">&#39;2012-05-02&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="c1">//test area end</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">from</span><span class="p">(</span><span class="s1">&#39;cosme_review&#39;</span><span class="p">);</span>          
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">where</span><span class="p">(</span><span class="s1">&#39;crv_date &gt;&#39;</span><span class="p">,</span> <span class="nv">$startDate</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">where</span><span class="p">(</span><span class="s1">&#39;crv_date &lt;&#39;</span><span class="p">,</span> <span class="nv">$endDate</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">order_by</span><span class="p">(</span><span class="s1">&#39;review_pageview_final&#39;</span><span class="p">,</span> <span class="s1">&#39;desc&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">limit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$query</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">();</span>
</span><span class='line'>      <span class="nv">$returnData</span> <span class="o">=</span> <span class="nv">$query</span><span class="o">-&gt;</span><span class="na">result_array</span><span class="p">();</span>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$returnData</span><span class="p">;</span>   
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">getHotReviewId</span><span class="p">(){</span>
</span><span class='line'>      <span class="nv">$hotReviewData</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getTopReview</span><span class="p">();</span>
</span><span class='line'>      <span class="k">foreach</span> <span class="p">(</span><span class="nv">$hotReviewData</span> <span class="k">as</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nv">$hotReviewId</span> <span class="o">=</span> <span class="nv">$value</span><span class="p">[</span><span class="s1">&#39;crv_seq&#39;</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$hotReviewId</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">getReviewByPhotos</span><span class="p">(){</span>
</span><span class='line'>      <span class="nv">$reviewId</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getTopReviewsIdByPhotos</span><span class="p">();</span>   
</span><span class='line'>      <span class="nv">$picUrls</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getPhotosUrl</span><span class="p">(</span><span class="nv">$reviewId</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">from</span><span class="p">(</span><span class="s1">&#39;cosme_review&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">join</span><span class="p">(</span><span class="s1">&#39;cosme_members&#39;</span><span class="p">,</span><span class="s1">&#39;cosme_review.crv_memid=cosme_members.cmem_seq&#39;</span><span class="p">,</span><span class="s1">&#39;left&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">where</span><span class="p">(</span><span class="s1">&#39;crv_seq&#39;</span><span class="p">,</span><span class="nv">$reviewId</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$query</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">();</span>
</span><span class='line'>      <span class="nv">$data</span> <span class="o">=</span> <span class="nv">$query</span><span class="o">-&gt;</span><span class="na">result_array</span><span class="p">();</span>
</span><span class='line'>      <span class="nv">$returnData</span><span class="p">[</span><span class="s1">&#39;reviewData&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$data</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$returnData</span><span class="p">[</span><span class="s1">&#39;picUrlData&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$picUrls</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$returnData</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//撈出商品圖片前五多的心得</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">getTopReviewsByPhotos</span><span class="p">(</span><span class="nv">$topNum</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span> <span class="nv">$startDate</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nv">$dateOffset</span> <span class="o">=</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>      <span class="nv">$endDate</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getDateOffSet</span><span class="p">(</span><span class="nv">$dateOffset</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$startDate</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getStartDate</span><span class="p">(</span><span class="nv">$startDate</span><span class="p">,</span><span class="nv">$endDate</span><span class="p">);</span>    
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">from</span><span class="p">(</span><span class="s1">&#39;cosme_review_pic&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">join</span><span class="p">(</span><span class="s1">&#39;cosme_review&#39;</span><span class="p">,</span> <span class="s1">&#39;cosme_review_pic.review_id=cosme_review.crv_seq&#39;</span><span class="p">,</span> <span class="s1">&#39;left&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">select</span><span class="p">(</span><span class="s1">&#39;review_id, crv_date, count(pic_id)&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">where</span><span class="p">(</span><span class="s1">&#39;review_id &gt;&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span><span class="c1">//防範把REVIEW—ID為NULL的也算近來</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">where</span><span class="p">(</span><span class="s1">&#39;crv_date &gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-05-02&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">where</span><span class="p">(</span><span class="s1">&#39;crv_date &lt;&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-05-03&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">group_by</span><span class="p">(</span><span class="s1">&#39;review_id&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">order_by</span><span class="p">(</span><span class="s1">&#39;count(pic_id)&#39;</span><span class="p">,</span> <span class="s1">&#39;desc&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">limit</span><span class="p">(</span><span class="nv">$topNum</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$query</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">();</span>
</span><span class='line'>      <span class="nv">$data</span> <span class="o">=</span> <span class="nv">$query</span><span class="o">-&gt;</span><span class="na">result_array</span><span class="p">();</span>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$data</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">//取回最多商品圖片的心得的單個ID</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">getTopReviewsIdByPhotos</span><span class="p">(){</span>
</span><span class='line'>      <span class="nv">$firstData</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getTopReviewsByPhotos</span><span class="p">();</span>
</span><span class='line'>      <span class="nv">$secondData</span> <span class="o">=</span> <span class="nb">array_rand</span><span class="p">(</span><span class="nv">$firstData</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$thirdData</span> <span class="o">=</span><span class="nv">$firstData</span><span class="p">[</span><span class="nv">$secondData</span><span class="p">];</span>
</span><span class='line'>      <span class="nv">$finalData</span> <span class="o">=</span> <span class="nv">$thirdData</span><span class="p">[</span><span class="s1">&#39;review_id&#39;</span><span class="p">];</span>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$finalData</span><span class="p">;</span>        
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">getPhotosByReviewId</span><span class="p">(</span><span class="nv">$reviewId</span><span class="p">){</span>
</span><span class='line'>      <span class="c1">//$reviewId=$this-&gt;getTopReviewsIdByPhotos();   </span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">from</span><span class="p">(</span><span class="s1">&#39;cosme_review_pic&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">select</span><span class="p">(</span><span class="s1">&#39;review_id,pic_id&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">where</span><span class="p">(</span><span class="s1">&#39;review_id&#39;</span><span class="p">,</span><span class="nv">$reviewId</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$query</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">();</span>
</span><span class='line'>      <span class="nv">$returnData</span> <span class="o">=</span> <span class="nv">$query</span><span class="o">-&gt;</span><span class="na">result_array</span><span class="p">();</span>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$returnData</span><span class="p">;</span>
</span><span class='line'>      
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">getPhotosIdsByReviewId</span><span class="p">(</span><span class="nv">$reviewId</span><span class="p">){</span>
</span><span class='line'>      <span class="nv">$returnData</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span> 
</span><span class='line'>      <span class="nv">$picIds</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getPhotosByReviewId</span><span class="p">(</span><span class="nv">$reviewId</span><span class="p">);</span>
</span><span class='line'>      <span class="k">foreach</span> <span class="p">(</span><span class="nv">$picIds</span> <span class="k">as</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nv">$returnData</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$value</span><span class="p">[</span><span class="s1">&#39;pic_id&#39;</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$returnData</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">getPhotosUrl</span><span class="p">(</span><span class="nv">$reviewId</span><span class="p">){</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$reviewId</span><span class="p">)){</span>
</span><span class='line'>          <span class="k">echo</span> <span class="s2">&quot;Warning Message.It might be wrong!!!!Photos didn&#39;t response to review!!!&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="nv">$reviewId</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getTopReviewsIdByPhotos</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nv">$returnData</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span> 
</span><span class='line'>      <span class="nv">$picIds</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getPhotosIdsByReviewId</span><span class="p">(</span><span class="nv">$reviewId</span><span class="p">);</span>
</span><span class='line'>      <span class="k">foreach</span> <span class="p">(</span><span class="nv">$picIds</span> <span class="k">as</span> <span class="nv">$picId</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nv">$strPicUrl</span> <span class="o">=</span> <span class="s2">&quot;http://img2.urcosme.com:901/api/productApi/reviewimage/pic_id/&quot;</span><span class="o">.</span><span class="nv">$picId</span><span class="o">.</span><span class="s2">&quot;/format/json&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="nv">$returnData</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getUrlArray</span><span class="p">(</span><span class="nv">$strPicUrl</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$returnData</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">//撈側邊欄廣告，猜測這裡撈的是活動新幹線的資料</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">getAdsBanner</span><span class="p">(</span><span class="nv">$startDate</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nv">$dateOffset</span> <span class="o">=</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>      <span class="nv">$endDate</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getDateOffSet</span><span class="p">(</span><span class="nv">$dateOffset</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$startDate</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getStartDate</span><span class="p">(</span><span class="nv">$startDate</span><span class="p">,</span><span class="nv">$endDate</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">from</span><span class="p">(</span><span class="s1">&#39;cosme_ads_banner&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">like</span><span class="p">(</span><span class="s1">&#39;start_date&#39;</span><span class="p">,</span> <span class="s1">&#39;2012-05-07&#39;</span><span class="p">,</span> <span class="s1">&#39;after&#39;</span><span class="p">);</span><span class="c1">//撈當天所有時間</span>
</span><span class='line'>      <span class="c1">//$this-&gt;db-&gt;where(&#39;start_date&#39;,&#39;2012-05-07&#39;);//只撈當天00：00：00</span>
</span><span class='line'>      <span class="nv">$query</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">();</span>
</span><span class='line'>      <span class="nv">$returnData</span><span class="p">[</span><span class="s1">&#39;cosme_ads_banner&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$query</span><span class="o">-&gt;</span><span class="na">result_array</span><span class="p">();</span>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$returnData</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>    <span class="c1">//文藝大大分享的處理方法</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">getUrlArray</span><span class="p">(</span><span class="nv">$strUrl</span><span class="p">){</span>
</span><span class='line'>      <span class="nv">$return_data</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>      <span class="nv">$curl</span> <span class="o">=</span> <span class="nb">curl_init</span><span class="p">();</span>
</span><span class='line'>      <span class="c1">//設置相關的url 關的url</span>
</span><span class='line'>      <span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="nx">CURLOPT_URL</span><span class="p">,</span> <span class="nv">$strUrl</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">//設置header</span>
</span><span class='line'>      <span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="nx">CURLOPT_HEADER</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">//要求顯示出螢幕上</span>
</span><span class='line'>      <span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="nx">CURLOPT_RETURNTRANSFER</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">//執行</span>
</span><span class='line'>      <span class="nv">$return_data</span> <span class="o">=</span> <span class="nb">curl_exec</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">//關閉連線</span>
</span><span class='line'>        <span class="nb">curl_close</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$return_data</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$return_data</span><span class="p">,</span><span class="k">true</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$return_data</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>6</li>
</ul>

]]></content>
  </entry>
  
</feed>
